
6_SpinlockSemaphore.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000016bc  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000094  0800185c  0800185c  0001185c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080018f0  080018f0  0002005c  2**0
                  CONTENTS
  4 .ARM          00000000  080018f0  080018f0  0002005c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080018f0  080018f0  0002005c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080018f0  080018f0  000118f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080018f4  080018f4  000118f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000005c  20000000  080018f8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001460  2000005c  08001954  0002005c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200014bc  08001954  000214bc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002005c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002008c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00001696  00000000  00000000  000200cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000070e  00000000  00000000  00021765  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000001f0  00000000  00000000  00021e78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000158  00000000  00000000  00022068  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000020f8  00000000  00000000  000221c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00002572  00000000  00000000  000242b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00055fcd  00000000  00000000  0002682a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00000dd8  00000000  00000000  0007c7f8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000077  00000000  00000000  0007d5d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	2000005c 	.word	0x2000005c
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08001844 	.word	0x08001844

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000060 	.word	0x20000060
 80001dc:	08001844 	.word	0x08001844

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <task0>:
void valve_open();
void valve_close();


void task0()
{
 8000280:	b580      	push	{r7, lr}
 8000282:	af00      	add	r7, sp, #0
	while(1)
	{
		osSemaphoreWait(&semaphore1);
 8000284:	4806      	ldr	r0, [pc, #24]	; (80002a0 <task0+0x20>)
 8000286:	f000 fa2a 	bl	80006de <osSemaphoreWait>
		Task0_Profiler++;
 800028a:	4b06      	ldr	r3, [pc, #24]	; (80002a4 <task0+0x24>)
 800028c:	681b      	ldr	r3, [r3, #0]
 800028e:	3301      	adds	r3, #1
 8000290:	4a04      	ldr	r2, [pc, #16]	; (80002a4 <task0+0x24>)
 8000292:	6013      	str	r3, [r2, #0]
		motor_run();
 8000294:	f000 f84e 	bl	8000334 <motor_run>
		osSemaphorePost(&semaphore2);
 8000298:	4803      	ldr	r0, [pc, #12]	; (80002a8 <task0+0x28>)
 800029a:	f000 fa0d 	bl	80006b8 <osSemaphorePost>
		osSemaphoreWait(&semaphore1);
 800029e:	e7f1      	b.n	8000284 <task0+0x4>
 80002a0:	20000084 	.word	0x20000084
 80002a4:	20000078 	.word	0x20000078
 80002a8:	20000088 	.word	0x20000088

080002ac <task1>:
	}
}

void task1()
{
 80002ac:	b580      	push	{r7, lr}
 80002ae:	af00      	add	r7, sp, #0
	while(1)
	{
		osSemaphoreWait(&semaphore2);
 80002b0:	4806      	ldr	r0, [pc, #24]	; (80002cc <task1+0x20>)
 80002b2:	f000 fa14 	bl	80006de <osSemaphoreWait>
		Task1_Profiler++;
 80002b6:	4b06      	ldr	r3, [pc, #24]	; (80002d0 <task1+0x24>)
 80002b8:	681b      	ldr	r3, [r3, #0]
 80002ba:	3301      	adds	r3, #1
 80002bc:	4a04      	ldr	r2, [pc, #16]	; (80002d0 <task1+0x24>)
 80002be:	6013      	str	r3, [r2, #0]
		valve_open();
 80002c0:	f000 f842 	bl	8000348 <valve_open>
		osSemaphorePost(&semaphore1);
 80002c4:	4803      	ldr	r0, [pc, #12]	; (80002d4 <task1+0x28>)
 80002c6:	f000 f9f7 	bl	80006b8 <osSemaphorePost>
		osSemaphoreWait(&semaphore2);
 80002ca:	e7f1      	b.n	80002b0 <task1+0x4>
 80002cc:	20000088 	.word	0x20000088
 80002d0:	2000007c 	.word	0x2000007c
 80002d4:	20000084 	.word	0x20000084

080002d8 <task2>:
	}
}

void task2()
{
 80002d8:	b480      	push	{r7}
 80002da:	af00      	add	r7, sp, #0
	while(1)
	{
		Task2_Profiler++;
 80002dc:	4b02      	ldr	r3, [pc, #8]	; (80002e8 <task2+0x10>)
 80002de:	681b      	ldr	r3, [r3, #0]
 80002e0:	3301      	adds	r3, #1
 80002e2:	4a01      	ldr	r2, [pc, #4]	; (80002e8 <task2+0x10>)
 80002e4:	6013      	str	r3, [r2, #0]
 80002e6:	e7f9      	b.n	80002dc <task2+0x4>
 80002e8:	20000080 	.word	0x20000080

080002ec <main>:
	}
}


int main()
{
 80002ec:	b580      	push	{r7, lr}
 80002ee:	af00      	add	r7, sp, #0

	// Initialize UART.
	uart_tx_init();
 80002f0:	f000 fac0 	bl	8000874 <uart_tx_init>

	// Initialize semaphores.
	osSemaphoreInit(&semaphore1, 1);
 80002f4:	2101      	movs	r1, #1
 80002f6:	480a      	ldr	r0, [pc, #40]	; (8000320 <main+0x34>)
 80002f8:	f000 f9d0 	bl	800069c <osSemaphoreInit>
	osSemaphoreInit(&semaphore2, 0);
 80002fc:	2100      	movs	r1, #0
 80002fe:	4809      	ldr	r0, [pc, #36]	; (8000324 <main+0x38>)
 8000300:	f000 f9cc 	bl	800069c <osSemaphoreInit>

	// Initialize kernel.
	osKernelInit();
 8000304:	f000 f924 	bl	8000550 <osKernelInit>

	// Add threads.
	osKernelAddThreads(&task0, &task1, &task2);
 8000308:	4a07      	ldr	r2, [pc, #28]	; (8000328 <main+0x3c>)
 800030a:	4908      	ldr	r1, [pc, #32]	; (800032c <main+0x40>)
 800030c:	4808      	ldr	r0, [pc, #32]	; (8000330 <main+0x44>)
 800030e:	f000 f92d 	bl	800056c <osKernelAddThreads>

	// Launch the kernel.
	osKernelLaunch(QUANTA);
 8000312:	2002      	movs	r0, #2
 8000314:	f000 f97e 	bl	8000614 <osKernelLaunch>
 8000318:	2300      	movs	r3, #0
}
 800031a:	4618      	mov	r0, r3
 800031c:	bd80      	pop	{r7, pc}
 800031e:	bf00      	nop
 8000320:	20000084 	.word	0x20000084
 8000324:	20000088 	.word	0x20000088
 8000328:	080002d9 	.word	0x080002d9
 800032c:	080002ad 	.word	0x080002ad
 8000330:	08000281 	.word	0x08000281

08000334 <motor_run>:

void motor_run()
{
 8000334:	b580      	push	{r7, lr}
 8000336:	af00      	add	r7, sp, #0
	printf("motor is running...\n\r");
 8000338:	4802      	ldr	r0, [pc, #8]	; (8000344 <motor_run+0x10>)
 800033a:	f000 fc0d 	bl	8000b58 <iprintf>
}
 800033e:	bf00      	nop
 8000340:	bd80      	pop	{r7, pc}
 8000342:	bf00      	nop
 8000344:	0800185c 	.word	0x0800185c

08000348 <valve_open>:
{
	printf("motor is stopping...\n\r");
}

void valve_open()
{
 8000348:	b580      	push	{r7, lr}
 800034a:	af00      	add	r7, sp, #0
	printf("valve is opening...\n\r");
 800034c:	4802      	ldr	r0, [pc, #8]	; (8000358 <valve_open+0x10>)
 800034e:	f000 fc03 	bl	8000b58 <iprintf>
}
 8000352:	bf00      	nop
 8000354:	bd80      	pop	{r7, pc}
 8000356:	bf00      	nop
 8000358:	0800188c 	.word	0x0800188c

0800035c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800035c:	b480      	push	{r7}
 800035e:	b083      	sub	sp, #12
 8000360:	af00      	add	r7, sp, #0
 8000362:	4603      	mov	r3, r0
 8000364:	6039      	str	r1, [r7, #0]
 8000366:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000368:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800036c:	2b00      	cmp	r3, #0
 800036e:	db0a      	blt.n	8000386 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000370:	683b      	ldr	r3, [r7, #0]
 8000372:	b2da      	uxtb	r2, r3
 8000374:	490c      	ldr	r1, [pc, #48]	; (80003a8 <__NVIC_SetPriority+0x4c>)
 8000376:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800037a:	0112      	lsls	r2, r2, #4
 800037c:	b2d2      	uxtb	r2, r2
 800037e:	440b      	add	r3, r1
 8000380:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000384:	e00a      	b.n	800039c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000386:	683b      	ldr	r3, [r7, #0]
 8000388:	b2da      	uxtb	r2, r3
 800038a:	4908      	ldr	r1, [pc, #32]	; (80003ac <__NVIC_SetPriority+0x50>)
 800038c:	79fb      	ldrb	r3, [r7, #7]
 800038e:	f003 030f 	and.w	r3, r3, #15
 8000392:	3b04      	subs	r3, #4
 8000394:	0112      	lsls	r2, r2, #4
 8000396:	b2d2      	uxtb	r2, r2
 8000398:	440b      	add	r3, r1
 800039a:	761a      	strb	r2, [r3, #24]
}
 800039c:	bf00      	nop
 800039e:	370c      	adds	r7, #12
 80003a0:	46bd      	mov	sp, r7
 80003a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003a6:	4770      	bx	lr
 80003a8:	e000e100 	.word	0xe000e100
 80003ac:	e000ed00 	.word	0xe000ed00

080003b0 <osKernelStackInit>:

// Each thread has STACKSIZE 100 => 400 bytes (32 bit words).
uint32_t TCB_STACK[NUM_OF_THREADS][STACKSIZE];

void osKernelStackInit(uint32_t i)
{
 80003b0:	b480      	push	{r7}
 80003b2:	b083      	sub	sp, #12
 80003b4:	af00      	add	r7, sp, #0
 80003b6:	6078      	str	r0, [r7, #4]

	// Set the current thread's stack pointer to the last location that we'll push stuff to.
	tcbs[i].stackPt = &TCB_STACK[i][STACKSIZE - 16];
 80003b8:	687b      	ldr	r3, [r7, #4]
 80003ba:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 80003be:	fb02 f303 	mul.w	r3, r2, r3
 80003c2:	f503 63c0 	add.w	r3, r3, #1536	; 0x600
 80003c6:	4a60      	ldr	r2, [pc, #384]	; (8000548 <osKernelStackInit+0x198>)
 80003c8:	441a      	add	r2, r3
 80003ca:	4960      	ldr	r1, [pc, #384]	; (800054c <osKernelStackInit+0x19c>)
 80003cc:	687b      	ldr	r3, [r7, #4]
 80003ce:	f841 2033 	str.w	r2, [r1, r3, lsl #3]

	// Set bit 21 of the PSR to 1, for thumb mode.
	TCB_STACK[i][STACKSIZE - 1] = (1<<24);
 80003d2:	4a5d      	ldr	r2, [pc, #372]	; (8000548 <osKernelStackInit+0x198>)
 80003d4:	687b      	ldr	r3, [r7, #4]
 80003d6:	f44f 61c8 	mov.w	r1, #1600	; 0x640
 80003da:	fb01 f303 	mul.w	r3, r1, r3
 80003de:	4413      	add	r3, r2
 80003e0:	f203 633c 	addw	r3, r3, #1596	; 0x63c
 80003e4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80003e8:	601a      	str	r2, [r3, #0]
	// R0...3, 12, LR (link register) are what an exception
	// pushes onto a stack automatically.
	// SP=>R13, LR=>R14, PC=>R15.

	// We don't need to init these regs explicitly, but we do so for debugging.
	TCB_STACK[i][STACKSIZE - 3] = 0xAAAAAAAA;		// LR.
 80003ea:	4a57      	ldr	r2, [pc, #348]	; (8000548 <osKernelStackInit+0x198>)
 80003ec:	687b      	ldr	r3, [r7, #4]
 80003ee:	f44f 61c8 	mov.w	r1, #1600	; 0x640
 80003f2:	fb01 f303 	mul.w	r3, r1, r3
 80003f6:	4413      	add	r3, r2
 80003f8:	f203 6334 	addw	r3, r3, #1588	; 0x634
 80003fc:	f04f 32aa 	mov.w	r2, #2863311530	; 0xaaaaaaaa
 8000400:	601a      	str	r2, [r3, #0]
	TCB_STACK[i][STACKSIZE - 4] = 0xAAAAAAAA;		// R12.
 8000402:	4a51      	ldr	r2, [pc, #324]	; (8000548 <osKernelStackInit+0x198>)
 8000404:	687b      	ldr	r3, [r7, #4]
 8000406:	f44f 61c8 	mov.w	r1, #1600	; 0x640
 800040a:	fb01 f303 	mul.w	r3, r1, r3
 800040e:	4413      	add	r3, r2
 8000410:	f503 63c6 	add.w	r3, r3, #1584	; 0x630
 8000414:	f04f 32aa 	mov.w	r2, #2863311530	; 0xaaaaaaaa
 8000418:	601a      	str	r2, [r3, #0]
	TCB_STACK[i][STACKSIZE - 5] = 0xAAAAAAAA;		// R3.
 800041a:	4a4b      	ldr	r2, [pc, #300]	; (8000548 <osKernelStackInit+0x198>)
 800041c:	687b      	ldr	r3, [r7, #4]
 800041e:	f44f 61c8 	mov.w	r1, #1600	; 0x640
 8000422:	fb01 f303 	mul.w	r3, r1, r3
 8000426:	4413      	add	r3, r2
 8000428:	f203 632c 	addw	r3, r3, #1580	; 0x62c
 800042c:	f04f 32aa 	mov.w	r2, #2863311530	; 0xaaaaaaaa
 8000430:	601a      	str	r2, [r3, #0]
	TCB_STACK[i][STACKSIZE - 6] = 0xAAAAAAAA;		// R2.
 8000432:	4a45      	ldr	r2, [pc, #276]	; (8000548 <osKernelStackInit+0x198>)
 8000434:	687b      	ldr	r3, [r7, #4]
 8000436:	f44f 61c8 	mov.w	r1, #1600	; 0x640
 800043a:	fb01 f303 	mul.w	r3, r1, r3
 800043e:	4413      	add	r3, r2
 8000440:	f503 63c5 	add.w	r3, r3, #1576	; 0x628
 8000444:	f04f 32aa 	mov.w	r2, #2863311530	; 0xaaaaaaaa
 8000448:	601a      	str	r2, [r3, #0]
	TCB_STACK[i][STACKSIZE - 7] = 0xAAAAAAAA;		// R1.
 800044a:	4a3f      	ldr	r2, [pc, #252]	; (8000548 <osKernelStackInit+0x198>)
 800044c:	687b      	ldr	r3, [r7, #4]
 800044e:	f44f 61c8 	mov.w	r1, #1600	; 0x640
 8000452:	fb01 f303 	mul.w	r3, r1, r3
 8000456:	4413      	add	r3, r2
 8000458:	f203 6324 	addw	r3, r3, #1572	; 0x624
 800045c:	f04f 32aa 	mov.w	r2, #2863311530	; 0xaaaaaaaa
 8000460:	601a      	str	r2, [r3, #0]
	TCB_STACK[i][STACKSIZE - 8] = 0xAAAAAAAA;		// R0.
 8000462:	4a39      	ldr	r2, [pc, #228]	; (8000548 <osKernelStackInit+0x198>)
 8000464:	687b      	ldr	r3, [r7, #4]
 8000466:	f44f 61c8 	mov.w	r1, #1600	; 0x640
 800046a:	fb01 f303 	mul.w	r3, r1, r3
 800046e:	4413      	add	r3, r2
 8000470:	f503 63c4 	add.w	r3, r3, #1568	; 0x620
 8000474:	f04f 32aa 	mov.w	r2, #2863311530	; 0xaaaaaaaa
 8000478:	601a      	str	r2, [r3, #0]

	TCB_STACK[i][STACKSIZE - 9] = 0xAAAAAAAA;		// R11.
 800047a:	4a33      	ldr	r2, [pc, #204]	; (8000548 <osKernelStackInit+0x198>)
 800047c:	687b      	ldr	r3, [r7, #4]
 800047e:	f44f 61c8 	mov.w	r1, #1600	; 0x640
 8000482:	fb01 f303 	mul.w	r3, r1, r3
 8000486:	4413      	add	r3, r2
 8000488:	f203 631c 	addw	r3, r3, #1564	; 0x61c
 800048c:	f04f 32aa 	mov.w	r2, #2863311530	; 0xaaaaaaaa
 8000490:	601a      	str	r2, [r3, #0]
	TCB_STACK[i][STACKSIZE - 10] = 0xAAAAAAAA;		// R10.
 8000492:	4a2d      	ldr	r2, [pc, #180]	; (8000548 <osKernelStackInit+0x198>)
 8000494:	687b      	ldr	r3, [r7, #4]
 8000496:	f44f 61c8 	mov.w	r1, #1600	; 0x640
 800049a:	fb01 f303 	mul.w	r3, r1, r3
 800049e:	4413      	add	r3, r2
 80004a0:	f503 63c3 	add.w	r3, r3, #1560	; 0x618
 80004a4:	f04f 32aa 	mov.w	r2, #2863311530	; 0xaaaaaaaa
 80004a8:	601a      	str	r2, [r3, #0]
	TCB_STACK[i][STACKSIZE - 11] = 0xAAAAAAAA;		// R9.
 80004aa:	4a27      	ldr	r2, [pc, #156]	; (8000548 <osKernelStackInit+0x198>)
 80004ac:	687b      	ldr	r3, [r7, #4]
 80004ae:	f44f 61c8 	mov.w	r1, #1600	; 0x640
 80004b2:	fb01 f303 	mul.w	r3, r1, r3
 80004b6:	4413      	add	r3, r2
 80004b8:	f203 6314 	addw	r3, r3, #1556	; 0x614
 80004bc:	f04f 32aa 	mov.w	r2, #2863311530	; 0xaaaaaaaa
 80004c0:	601a      	str	r2, [r3, #0]
	TCB_STACK[i][STACKSIZE - 12] = 0xAAAAAAAA;		// R8.
 80004c2:	4a21      	ldr	r2, [pc, #132]	; (8000548 <osKernelStackInit+0x198>)
 80004c4:	687b      	ldr	r3, [r7, #4]
 80004c6:	f44f 61c8 	mov.w	r1, #1600	; 0x640
 80004ca:	fb01 f303 	mul.w	r3, r1, r3
 80004ce:	4413      	add	r3, r2
 80004d0:	f503 63c2 	add.w	r3, r3, #1552	; 0x610
 80004d4:	f04f 32aa 	mov.w	r2, #2863311530	; 0xaaaaaaaa
 80004d8:	601a      	str	r2, [r3, #0]
	TCB_STACK[i][STACKSIZE - 13] = 0xAAAAAAAA;		// R7.
 80004da:	4a1b      	ldr	r2, [pc, #108]	; (8000548 <osKernelStackInit+0x198>)
 80004dc:	687b      	ldr	r3, [r7, #4]
 80004de:	f44f 61c8 	mov.w	r1, #1600	; 0x640
 80004e2:	fb01 f303 	mul.w	r3, r1, r3
 80004e6:	4413      	add	r3, r2
 80004e8:	f203 630c 	addw	r3, r3, #1548	; 0x60c
 80004ec:	f04f 32aa 	mov.w	r2, #2863311530	; 0xaaaaaaaa
 80004f0:	601a      	str	r2, [r3, #0]
	TCB_STACK[i][STACKSIZE - 14] = 0xAAAAAAAA;		// R6.
 80004f2:	4a15      	ldr	r2, [pc, #84]	; (8000548 <osKernelStackInit+0x198>)
 80004f4:	687b      	ldr	r3, [r7, #4]
 80004f6:	f44f 61c8 	mov.w	r1, #1600	; 0x640
 80004fa:	fb01 f303 	mul.w	r3, r1, r3
 80004fe:	4413      	add	r3, r2
 8000500:	f503 63c1 	add.w	r3, r3, #1544	; 0x608
 8000504:	f04f 32aa 	mov.w	r2, #2863311530	; 0xaaaaaaaa
 8000508:	601a      	str	r2, [r3, #0]
	TCB_STACK[i][STACKSIZE - 15] = 0xAAAAAAAA;		// R5.
 800050a:	4a0f      	ldr	r2, [pc, #60]	; (8000548 <osKernelStackInit+0x198>)
 800050c:	687b      	ldr	r3, [r7, #4]
 800050e:	f44f 61c8 	mov.w	r1, #1600	; 0x640
 8000512:	fb01 f303 	mul.w	r3, r1, r3
 8000516:	4413      	add	r3, r2
 8000518:	f203 6304 	addw	r3, r3, #1540	; 0x604
 800051c:	f04f 32aa 	mov.w	r2, #2863311530	; 0xaaaaaaaa
 8000520:	601a      	str	r2, [r3, #0]
	TCB_STACK[i][STACKSIZE - 16] = 0xAAAAAAAA;		// R4.
 8000522:	4a09      	ldr	r2, [pc, #36]	; (8000548 <osKernelStackInit+0x198>)
 8000524:	687b      	ldr	r3, [r7, #4]
 8000526:	f44f 61c8 	mov.w	r1, #1600	; 0x640
 800052a:	fb01 f303 	mul.w	r3, r1, r3
 800052e:	4413      	add	r3, r2
 8000530:	f503 63c0 	add.w	r3, r3, #1536	; 0x600
 8000534:	f04f 32aa 	mov.w	r2, #2863311530	; 0xaaaaaaaa
 8000538:	601a      	str	r2, [r3, #0]
}
 800053a:	bf00      	nop
 800053c:	370c      	adds	r7, #12
 800053e:	46bd      	mov	sp, r7
 8000540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000544:	4770      	bx	lr
 8000546:	bf00      	nop
 8000548:	200000ac 	.word	0x200000ac
 800054c:	20000090 	.word	0x20000090

08000550 <osKernelInit>:


void osKernelInit()
{
 8000550:	b480      	push	{r7}
 8000552:	af00      	add	r7, sp, #0
	MILLIS_PRESCALER = (BUS_FREQ/1000); // 16000hz is 1ms.
 8000554:	4b04      	ldr	r3, [pc, #16]	; (8000568 <osKernelInit+0x18>)
 8000556:	f44f 527a 	mov.w	r2, #16000	; 0x3e80
 800055a:	601a      	str	r2, [r3, #0]
}
 800055c:	bf00      	nop
 800055e:	46bd      	mov	sp, r7
 8000560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000564:	4770      	bx	lr
 8000566:	bf00      	nop
 8000568:	2000008c 	.word	0x2000008c

0800056c <osKernelAddThreads>:


// Define the tasks (functions) to run for the 3 threads explicitly as function ptrs,
// and setup the nextPt for each thread to enable round-robin.
uint8_t osKernelAddThreads(void(*task0)(), void(*task1)(), void(*task2)())
{
 800056c:	b580      	push	{r7, lr}
 800056e:	b084      	sub	sp, #16
 8000570:	af00      	add	r7, sp, #0
 8000572:	60f8      	str	r0, [r7, #12]
 8000574:	60b9      	str	r1, [r7, #8]
 8000576:	607a      	str	r2, [r7, #4]
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000578:	b672      	cpsid	i
}
 800057a:	bf00      	nop
	// Disable global interrupts.
	__disable_irq();

	// Setup next threads for each thread, circularly.
	tcbs[0].nextPt = &tcbs[1];
 800057c:	4b14      	ldr	r3, [pc, #80]	; (80005d0 <osKernelAddThreads+0x64>)
 800057e:	4a15      	ldr	r2, [pc, #84]	; (80005d4 <osKernelAddThreads+0x68>)
 8000580:	605a      	str	r2, [r3, #4]
	tcbs[1].nextPt = &tcbs[2];
 8000582:	4b13      	ldr	r3, [pc, #76]	; (80005d0 <osKernelAddThreads+0x64>)
 8000584:	4a14      	ldr	r2, [pc, #80]	; (80005d8 <osKernelAddThreads+0x6c>)
 8000586:	60da      	str	r2, [r3, #12]
	tcbs[2].nextPt = &tcbs[0];
 8000588:	4b11      	ldr	r3, [pc, #68]	; (80005d0 <osKernelAddThreads+0x64>)
 800058a:	4a11      	ldr	r2, [pc, #68]	; (80005d0 <osKernelAddThreads+0x64>)
 800058c:	615a      	str	r2, [r3, #20]

	// Initial stack for thread 0.
	osKernelStackInit(0);
 800058e:	2000      	movs	r0, #0
 8000590:	f7ff ff0e 	bl	80003b0 <osKernelStackInit>
	// Initialize PC for thread 0.
	TCB_STACK[0][STACKSIZE - 2] = (uint32_t)task0;
 8000594:	68fb      	ldr	r3, [r7, #12]
 8000596:	4a11      	ldr	r2, [pc, #68]	; (80005dc <osKernelAddThreads+0x70>)
 8000598:	f8c2 3638 	str.w	r3, [r2, #1592]	; 0x638

	// Initial stack for thread 1.
	osKernelStackInit(1);
 800059c:	2001      	movs	r0, #1
 800059e:	f7ff ff07 	bl	80003b0 <osKernelStackInit>
	// Initialize PC for thread 1.
	TCB_STACK[1][STACKSIZE - 2] = (uint32_t)task1;
 80005a2:	68bb      	ldr	r3, [r7, #8]
 80005a4:	4a0d      	ldr	r2, [pc, #52]	; (80005dc <osKernelAddThreads+0x70>)
 80005a6:	f8c2 3c78 	str.w	r3, [r2, #3192]	; 0xc78

	// Initial stack for thread 2.
	osKernelStackInit(2);
 80005aa:	2002      	movs	r0, #2
 80005ac:	f7ff ff00 	bl	80003b0 <osKernelStackInit>
	// Initialize PC for thread 2.
	TCB_STACK[2][STACKSIZE - 2] = (uint32_t)task2;
 80005b0:	687b      	ldr	r3, [r7, #4]
 80005b2:	4a0a      	ldr	r2, [pc, #40]	; (80005dc <osKernelAddThreads+0x70>)
 80005b4:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80005b8:	f8c2 32b8 	str.w	r3, [r2, #696]	; 0x2b8


	// Assign current thread to be 0th task.
	currentPt = &tcbs[0];
 80005bc:	4b08      	ldr	r3, [pc, #32]	; (80005e0 <osKernelAddThreads+0x74>)
 80005be:	4a04      	ldr	r2, [pc, #16]	; (80005d0 <osKernelAddThreads+0x64>)
 80005c0:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80005c2:	b662      	cpsie	i
}
 80005c4:	bf00      	nop

	// Enable global interrupts.
	__enable_irq();

	return 1;
 80005c6:	2301      	movs	r3, #1
}
 80005c8:	4618      	mov	r0, r3
 80005ca:	3710      	adds	r7, #16
 80005cc:	46bd      	mov	sp, r7
 80005ce:	bd80      	pop	{r7, pc}
 80005d0:	20000090 	.word	0x20000090
 80005d4:	20000098 	.word	0x20000098
 80005d8:	200000a0 	.word	0x200000a0
 80005dc:	200000ac 	.word	0x200000ac
 80005e0:	200000a8 	.word	0x200000a8

080005e4 <osSchedulerLaunch>:

// Launches the first thread (0), and never executes again.
void osSchedulerLaunch()
{
 80005e4:	b480      	push	{r7}
 80005e6:	af00      	add	r7, sp, #0
	// Load address of currentPt into R0.
	// R0 = &currentPt.
	__asm("LDR 		R0,=currentPt");
 80005e8:	4809      	ldr	r0, [pc, #36]	; (8000610 <osSchedulerLaunch+0x2c>)

	// Load value at R0 (* (&currentPt)) into R2.
	// R2 = currentPt.
	__asm("LDR 		R2,[R0]");
 80005ea:	6802      	ldr	r2, [r0, #0]

	// Load the stack pointer from value at R2.
	// SP = *currentPt = currentPt->stackPt.
	__asm("LDR 		SP,[R2]");
 80005ec:	f8d2 d000 	ldr.w	sp, [r2]

	// Restore R4...R11.
	__asm("POP 		{R4-R11}");
 80005f0:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}

	// Restore R12.
	__asm("POP 		{R12}");
 80005f4:	f85d cb04 	ldr.w	ip, [sp], #4

	// Restore R0...R3.
	__asm("POP 		{R0-R3}");
 80005f8:	bc0f      	pop	{r0, r1, r2, r3}

	// Skip restoring LR for current thread.
	__asm("ADD		SP, SP, #4");
 80005fa:	b001      	add	sp, #4

	// Create a new start location by popping current address into LR.
	// This represents the current address of the top of this thread's stack.
	__asm("POP 		{LR}");
 80005fc:	f85d eb04 	ldr.w	lr, [sp], #4

	// Skip restoring PSR.
	__asm("ADD		SP, SP, #4");
 8000600:	b001      	add	sp, #4

	// Enable global interrupts.
	__asm("CPSIE 	I");
 8000602:	b662      	cpsie	i

	// Return from exception (automatically restores R0...3, 12).
	__asm("BX 		LR");
 8000604:	4770      	bx	lr
}
 8000606:	bf00      	nop
 8000608:	46bd      	mov	sp, r7
 800060a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800060e:	4770      	bx	lr
 8000610:	200000a8 	.word	0x200000a8

08000614 <osKernelLaunch>:


void osKernelLaunch(uint32_t quanta)
{
 8000614:	b580      	push	{r7, lr}
 8000616:	b082      	sub	sp, #8
 8000618:	af00      	add	r7, sp, #0
 800061a:	6078      	str	r0, [r7, #4]
	// Reset SysTick.
	SysTick->CTRL = 0;
 800061c:	4b13      	ldr	r3, [pc, #76]	; (800066c <osKernelLaunch+0x58>)
 800061e:	2200      	movs	r2, #0
 8000620:	601a      	str	r2, [r3, #0]

	// Clear SysTick's current value reg.
	SysTick->VAL = 0;
 8000622:	4b12      	ldr	r3, [pc, #72]	; (800066c <osKernelLaunch+0x58>)
 8000624:	2200      	movs	r2, #0
 8000626:	609a      	str	r2, [r3, #8]

	// Load quanta.
	SysTick->LOAD = (quanta * MILLIS_PRESCALER) - 1;
 8000628:	4b11      	ldr	r3, [pc, #68]	; (8000670 <osKernelLaunch+0x5c>)
 800062a:	681b      	ldr	r3, [r3, #0]
 800062c:	687a      	ldr	r2, [r7, #4]
 800062e:	fb02 f303 	mul.w	r3, r2, r3
 8000632:	4a0e      	ldr	r2, [pc, #56]	; (800066c <osKernelLaunch+0x58>)
 8000634:	3b01      	subs	r3, #1
 8000636:	6053      	str	r3, [r2, #4]

	// Set SysTick to low priority.
	NVIC_SetPriority(SysTick_IRQn, 15);
 8000638:	210f      	movs	r1, #15
 800063a:	f04f 30ff 	mov.w	r0, #4294967295
 800063e:	f7ff fe8d 	bl	800035c <__NVIC_SetPriority>

	// Enable SysTick.
	SysTick->CTRL = CTRL_ENABLE;
 8000642:	4b0a      	ldr	r3, [pc, #40]	; (800066c <osKernelLaunch+0x58>)
 8000644:	2201      	movs	r2, #1
 8000646:	601a      	str	r2, [r3, #0]

	// Select internal clock.
	SysTick->CTRL |= CTRL_CLKSRC;
 8000648:	4b08      	ldr	r3, [pc, #32]	; (800066c <osKernelLaunch+0x58>)
 800064a:	681b      	ldr	r3, [r3, #0]
 800064c:	4a07      	ldr	r2, [pc, #28]	; (800066c <osKernelLaunch+0x58>)
 800064e:	f043 0304 	orr.w	r3, r3, #4
 8000652:	6013      	str	r3, [r2, #0]

	// Enable SysTick interrupts.
	SysTick->CTRL |= CTRL_TICKINT;
 8000654:	4b05      	ldr	r3, [pc, #20]	; (800066c <osKernelLaunch+0x58>)
 8000656:	681b      	ldr	r3, [r3, #0]
 8000658:	4a04      	ldr	r2, [pc, #16]	; (800066c <osKernelLaunch+0x58>)
 800065a:	f043 0302 	orr.w	r3, r3, #2
 800065e:	6013      	str	r3, [r2, #0]

	// Launch scheduler.
	osSchedulerLaunch();
 8000660:	f7ff ffc0 	bl	80005e4 <osSchedulerLaunch>
}
 8000664:	bf00      	nop
 8000666:	3708      	adds	r7, #8
 8000668:	46bd      	mov	sp, r7
 800066a:	bd80      	pop	{r7, pc}
 800066c:	e000e010 	.word	0xe000e010
 8000670:	2000008c 	.word	0x2000008c

08000674 <SysTick_Handler>:
// When exception occurs, R0...3, 12 are automatically saved.
__attribute__((naked)) SysTick_Handler()
{
	// SUSPEND CURRENT THREAD.
	// Disable global interrupts.
	__asm("CPSID	I");
 8000674:	b672      	cpsid	i

	// Save R4...R11, since these aren't automatically saved on stack.
	__asm("PUSH		{R4-R11}");
 8000676:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}

	// Load the address of currentPt into R0, which would basically be type tcbType**.
	// R0 = &currentPt.
	__asm("LDR		R0, =currentPt");
 800067a:	4807      	ldr	r0, [pc, #28]	; (8000698 <SysTick_Handler+0x24>)

	// Load the actual memory at **currentPt, which would be *currentPt- which points to the actual current struct tcbType.
	// R1 = *R0 = currentPt.
	__asm("LDR 		R1,[R0]");
 800067c:	6801      	ldr	r1, [r0, #0]

	// Store Cortex-M SP at address R1, which is the tcbType (so, we're setting this thread's stackPt).
	// *R1 = SP = stackPt.
	__asm("STR 		SP,[R1]");
 800067e:	f8c1 d000 	str.w	sp, [r1]

	// CHOOSE NEXT THREAD.
	// Load R1 from the location 4 bytes above R1, since 4 bytes above R1 (stackPt), we have nextPt,
	// so loading from this location nextPt essentially loads the next thread into R1.
	// R1 = currentPt->nextPt.
	__asm("LDR 		R1, [R1, #4]");
 8000682:	6849      	ldr	r1, [r1, #4]

	// Store R1 at the address R0.
	// *R0 = R1 = currentPt->nextPt;
	__asm("STR 		R1, [R0]");
 8000684:	6001      	str	r1, [r0, #0]

	// Load SP from address R1.
	// SP = currentPt->nextPt.
	__asm("LDR 		SP,[R1]");
 8000686:	f8d1 d000 	ldr.w	sp, [r1]

	// Pop R4...R11.
	__asm("POP 		{R4-R11}");
 800068a:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}

	// Enable global interrupts.
	__asm("CPSIE 	I");
 800068e:	b662      	cpsie	i

	// Return from exception (automatically restores R0...3, 12).
	__asm("BX 		LR");
 8000690:	4770      	bx	lr
}
 8000692:	bf00      	nop
 8000694:	4618      	mov	r0, r3
 8000696:	0000      	.short	0x0000
 8000698:	200000a8 	.word	0x200000a8

0800069c <osSemaphoreInit>:

void osSemaphoreInit(int32_t* semaphore, int32_t value)
{
 800069c:	b480      	push	{r7}
 800069e:	b083      	sub	sp, #12
 80006a0:	af00      	add	r7, sp, #0
 80006a2:	6078      	str	r0, [r7, #4]
 80006a4:	6039      	str	r1, [r7, #0]
	*semaphore = value;
 80006a6:	687b      	ldr	r3, [r7, #4]
 80006a8:	683a      	ldr	r2, [r7, #0]
 80006aa:	601a      	str	r2, [r3, #0]
}
 80006ac:	bf00      	nop
 80006ae:	370c      	adds	r7, #12
 80006b0:	46bd      	mov	sp, r7
 80006b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006b6:	4770      	bx	lr

080006b8 <osSemaphorePost>:

void osSemaphorePost(int32_t* semaphore)
{
 80006b8:	b480      	push	{r7}
 80006ba:	b083      	sub	sp, #12
 80006bc:	af00      	add	r7, sp, #0
 80006be:	6078      	str	r0, [r7, #4]
  __ASM volatile ("cpsid i" : : : "memory");
 80006c0:	b672      	cpsid	i
}
 80006c2:	bf00      	nop
	// Disable global interrupts.
	__disable_irq();

	*semaphore += 1;
 80006c4:	687b      	ldr	r3, [r7, #4]
 80006c6:	681b      	ldr	r3, [r3, #0]
 80006c8:	1c5a      	adds	r2, r3, #1
 80006ca:	687b      	ldr	r3, [r7, #4]
 80006cc:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80006ce:	b662      	cpsie	i
}
 80006d0:	bf00      	nop

	// Enable global interrupts.
	__enable_irq();
}
 80006d2:	bf00      	nop
 80006d4:	370c      	adds	r7, #12
 80006d6:	46bd      	mov	sp, r7
 80006d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006dc:	4770      	bx	lr

080006de <osSemaphoreWait>:


void osSemaphoreWait(int32_t* semaphore)
{
 80006de:	b480      	push	{r7}
 80006e0:	b083      	sub	sp, #12
 80006e2:	af00      	add	r7, sp, #0
 80006e4:	6078      	str	r0, [r7, #4]
  __ASM volatile ("cpsid i" : : : "memory");
 80006e6:	b672      	cpsid	i
}
 80006e8:	bf00      	nop
	// Disable global interrupts.
	__disable_irq();


	while (*semaphore <= 0) // Basically spinning.
 80006ea:	e003      	b.n	80006f4 <osSemaphoreWait+0x16>
  __ASM volatile ("cpsid i" : : : "memory");
 80006ec:	b672      	cpsid	i
}
 80006ee:	bf00      	nop
  __ASM volatile ("cpsie i" : : : "memory");
 80006f0:	b662      	cpsie	i
}
 80006f2:	bf00      	nop
 80006f4:	687b      	ldr	r3, [r7, #4]
 80006f6:	681b      	ldr	r3, [r3, #0]
 80006f8:	2b00      	cmp	r3, #0
 80006fa:	ddf7      	ble.n	80006ec <osSemaphoreWait+0xe>
	{
		__disable_irq();
		__enable_irq();
	}

	*semaphore -= 1;
 80006fc:	687b      	ldr	r3, [r7, #4]
 80006fe:	681b      	ldr	r3, [r3, #0]
 8000700:	1e5a      	subs	r2, r3, #1
 8000702:	687b      	ldr	r3, [r7, #4]
 8000704:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8000706:	b662      	cpsie	i
}
 8000708:	bf00      	nop

	// Enable global interrupts.
	__enable_irq();
}
 800070a:	bf00      	nop
 800070c:	370c      	adds	r7, #12
 800070e:	46bd      	mov	sp, r7
 8000710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000714:	4770      	bx	lr

08000716 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000716:	b580      	push	{r7, lr}
 8000718:	b086      	sub	sp, #24
 800071a:	af00      	add	r7, sp, #0
 800071c:	60f8      	str	r0, [r7, #12]
 800071e:	60b9      	str	r1, [r7, #8]
 8000720:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000722:	2300      	movs	r3, #0
 8000724:	617b      	str	r3, [r7, #20]
 8000726:	e00a      	b.n	800073e <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000728:	f3af 8000 	nop.w
 800072c:	4601      	mov	r1, r0
 800072e:	68bb      	ldr	r3, [r7, #8]
 8000730:	1c5a      	adds	r2, r3, #1
 8000732:	60ba      	str	r2, [r7, #8]
 8000734:	b2ca      	uxtb	r2, r1
 8000736:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000738:	697b      	ldr	r3, [r7, #20]
 800073a:	3301      	adds	r3, #1
 800073c:	617b      	str	r3, [r7, #20]
 800073e:	697a      	ldr	r2, [r7, #20]
 8000740:	687b      	ldr	r3, [r7, #4]
 8000742:	429a      	cmp	r2, r3
 8000744:	dbf0      	blt.n	8000728 <_read+0x12>
  }

  return len;
 8000746:	687b      	ldr	r3, [r7, #4]
}
 8000748:	4618      	mov	r0, r3
 800074a:	3718      	adds	r7, #24
 800074c:	46bd      	mov	sp, r7
 800074e:	bd80      	pop	{r7, pc}

08000750 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000750:	b580      	push	{r7, lr}
 8000752:	b086      	sub	sp, #24
 8000754:	af00      	add	r7, sp, #0
 8000756:	60f8      	str	r0, [r7, #12]
 8000758:	60b9      	str	r1, [r7, #8]
 800075a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800075c:	2300      	movs	r3, #0
 800075e:	617b      	str	r3, [r7, #20]
 8000760:	e009      	b.n	8000776 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000762:	68bb      	ldr	r3, [r7, #8]
 8000764:	1c5a      	adds	r2, r3, #1
 8000766:	60ba      	str	r2, [r7, #8]
 8000768:	781b      	ldrb	r3, [r3, #0]
 800076a:	4618      	mov	r0, r3
 800076c:	f000 f876 	bl	800085c <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000770:	697b      	ldr	r3, [r7, #20]
 8000772:	3301      	adds	r3, #1
 8000774:	617b      	str	r3, [r7, #20]
 8000776:	697a      	ldr	r2, [r7, #20]
 8000778:	687b      	ldr	r3, [r7, #4]
 800077a:	429a      	cmp	r2, r3
 800077c:	dbf1      	blt.n	8000762 <_write+0x12>
  }
  return len;
 800077e:	687b      	ldr	r3, [r7, #4]
}
 8000780:	4618      	mov	r0, r3
 8000782:	3718      	adds	r7, #24
 8000784:	46bd      	mov	sp, r7
 8000786:	bd80      	pop	{r7, pc}

08000788 <_close>:

int _close(int file)
{
 8000788:	b480      	push	{r7}
 800078a:	b083      	sub	sp, #12
 800078c:	af00      	add	r7, sp, #0
 800078e:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000790:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000794:	4618      	mov	r0, r3
 8000796:	370c      	adds	r7, #12
 8000798:	46bd      	mov	sp, r7
 800079a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800079e:	4770      	bx	lr

080007a0 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80007a0:	b480      	push	{r7}
 80007a2:	b083      	sub	sp, #12
 80007a4:	af00      	add	r7, sp, #0
 80007a6:	6078      	str	r0, [r7, #4]
 80007a8:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80007aa:	683b      	ldr	r3, [r7, #0]
 80007ac:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80007b0:	605a      	str	r2, [r3, #4]
  return 0;
 80007b2:	2300      	movs	r3, #0
}
 80007b4:	4618      	mov	r0, r3
 80007b6:	370c      	adds	r7, #12
 80007b8:	46bd      	mov	sp, r7
 80007ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007be:	4770      	bx	lr

080007c0 <_isatty>:

int _isatty(int file)
{
 80007c0:	b480      	push	{r7}
 80007c2:	b083      	sub	sp, #12
 80007c4:	af00      	add	r7, sp, #0
 80007c6:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80007c8:	2301      	movs	r3, #1
}
 80007ca:	4618      	mov	r0, r3
 80007cc:	370c      	adds	r7, #12
 80007ce:	46bd      	mov	sp, r7
 80007d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007d4:	4770      	bx	lr

080007d6 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80007d6:	b480      	push	{r7}
 80007d8:	b085      	sub	sp, #20
 80007da:	af00      	add	r7, sp, #0
 80007dc:	60f8      	str	r0, [r7, #12]
 80007de:	60b9      	str	r1, [r7, #8]
 80007e0:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80007e2:	2300      	movs	r3, #0
}
 80007e4:	4618      	mov	r0, r3
 80007e6:	3714      	adds	r7, #20
 80007e8:	46bd      	mov	sp, r7
 80007ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ee:	4770      	bx	lr

080007f0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80007f0:	b580      	push	{r7, lr}
 80007f2:	b086      	sub	sp, #24
 80007f4:	af00      	add	r7, sp, #0
 80007f6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80007f8:	4a14      	ldr	r2, [pc, #80]	; (800084c <_sbrk+0x5c>)
 80007fa:	4b15      	ldr	r3, [pc, #84]	; (8000850 <_sbrk+0x60>)
 80007fc:	1ad3      	subs	r3, r2, r3
 80007fe:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000800:	697b      	ldr	r3, [r7, #20]
 8000802:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000804:	4b13      	ldr	r3, [pc, #76]	; (8000854 <_sbrk+0x64>)
 8000806:	681b      	ldr	r3, [r3, #0]
 8000808:	2b00      	cmp	r3, #0
 800080a:	d102      	bne.n	8000812 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800080c:	4b11      	ldr	r3, [pc, #68]	; (8000854 <_sbrk+0x64>)
 800080e:	4a12      	ldr	r2, [pc, #72]	; (8000858 <_sbrk+0x68>)
 8000810:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000812:	4b10      	ldr	r3, [pc, #64]	; (8000854 <_sbrk+0x64>)
 8000814:	681a      	ldr	r2, [r3, #0]
 8000816:	687b      	ldr	r3, [r7, #4]
 8000818:	4413      	add	r3, r2
 800081a:	693a      	ldr	r2, [r7, #16]
 800081c:	429a      	cmp	r2, r3
 800081e:	d207      	bcs.n	8000830 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000820:	f000 fa3e 	bl	8000ca0 <__errno>
 8000824:	4603      	mov	r3, r0
 8000826:	220c      	movs	r2, #12
 8000828:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800082a:	f04f 33ff 	mov.w	r3, #4294967295
 800082e:	e009      	b.n	8000844 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000830:	4b08      	ldr	r3, [pc, #32]	; (8000854 <_sbrk+0x64>)
 8000832:	681b      	ldr	r3, [r3, #0]
 8000834:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000836:	4b07      	ldr	r3, [pc, #28]	; (8000854 <_sbrk+0x64>)
 8000838:	681a      	ldr	r2, [r3, #0]
 800083a:	687b      	ldr	r3, [r7, #4]
 800083c:	4413      	add	r3, r2
 800083e:	4a05      	ldr	r2, [pc, #20]	; (8000854 <_sbrk+0x64>)
 8000840:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000842:	68fb      	ldr	r3, [r7, #12]
}
 8000844:	4618      	mov	r0, r3
 8000846:	3718      	adds	r7, #24
 8000848:	46bd      	mov	sp, r7
 800084a:	bd80      	pop	{r7, pc}
 800084c:	20020000 	.word	0x20020000
 8000850:	00000400 	.word	0x00000400
 8000854:	2000136c 	.word	0x2000136c
 8000858:	200014c0 	.word	0x200014c0

0800085c <__io_putchar>:
static void uart_set_baudrate(uint32_t periph_clk, uint32_t baudrate);
static uint32_t compute_uart_bd(uint32_t periph_clk, uint32_t baudrate);


int __io_putchar(int ch) // Overriding destination of printf.
{
 800085c:	b580      	push	{r7, lr}
 800085e:	b082      	sub	sp, #8
 8000860:	af00      	add	r7, sp, #0
 8000862:	6078      	str	r0, [r7, #4]
	uart_write(ch);
 8000864:	6878      	ldr	r0, [r7, #4]
 8000866:	f000 f84f 	bl	8000908 <uart_write>
	return ch;
 800086a:	687b      	ldr	r3, [r7, #4]
}
 800086c:	4618      	mov	r0, r3
 800086e:	3708      	adds	r7, #8
 8000870:	46bd      	mov	sp, r7
 8000872:	bd80      	pop	{r7, pc}

08000874 <uart_tx_init>:

void uart_tx_init() // TX => pin for transmitting information (RX is for receiving line).
{
 8000874:	b580      	push	{r7, lr}
 8000876:	af00      	add	r7, sp, #0
	// Enable clock access to GPIOA.
	RCC->AHB1ENR |= GPIOAEN;
 8000878:	4b1f      	ldr	r3, [pc, #124]	; (80008f8 <uart_tx_init+0x84>)
 800087a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800087c:	4a1e      	ldr	r2, [pc, #120]	; (80008f8 <uart_tx_init+0x84>)
 800087e:	f043 0301 	orr.w	r3, r3, #1
 8000882:	6313      	str	r3, [r2, #48]	; 0x30

	// Set PA2 to AF mode (USART2 TX), we don't care about RX right now since our board will only transmit..
	GPIOA->MODER &= ~(1<<4);
 8000884:	4b1d      	ldr	r3, [pc, #116]	; (80008fc <uart_tx_init+0x88>)
 8000886:	681b      	ldr	r3, [r3, #0]
 8000888:	4a1c      	ldr	r2, [pc, #112]	; (80008fc <uart_tx_init+0x88>)
 800088a:	f023 0310 	bic.w	r3, r3, #16
 800088e:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |= (1<<5);
 8000890:	4b1a      	ldr	r3, [pc, #104]	; (80008fc <uart_tx_init+0x88>)
 8000892:	681b      	ldr	r3, [r3, #0]
 8000894:	4a19      	ldr	r2, [pc, #100]	; (80008fc <uart_tx_init+0x88>)
 8000896:	f043 0320 	orr.w	r3, r3, #32
 800089a:	6013      	str	r3, [r2, #0]

	// Set AF type to AF07, PA2 is denoted by AFR[0] (low) pins 11,10,9,8 (for which we must out 0111 to specify 7)
	GPIOA->AFR[0] |= (1<<8);
 800089c:	4b17      	ldr	r3, [pc, #92]	; (80008fc <uart_tx_init+0x88>)
 800089e:	6a1b      	ldr	r3, [r3, #32]
 80008a0:	4a16      	ldr	r2, [pc, #88]	; (80008fc <uart_tx_init+0x88>)
 80008a2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80008a6:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] |= (1<<9);
 80008a8:	4b14      	ldr	r3, [pc, #80]	; (80008fc <uart_tx_init+0x88>)
 80008aa:	6a1b      	ldr	r3, [r3, #32]
 80008ac:	4a13      	ldr	r2, [pc, #76]	; (80008fc <uart_tx_init+0x88>)
 80008ae:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80008b2:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] |= (1<<10);
 80008b4:	4b11      	ldr	r3, [pc, #68]	; (80008fc <uart_tx_init+0x88>)
 80008b6:	6a1b      	ldr	r3, [r3, #32]
 80008b8:	4a10      	ldr	r2, [pc, #64]	; (80008fc <uart_tx_init+0x88>)
 80008ba:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80008be:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] &= ~(1<<11);
 80008c0:	4b0e      	ldr	r3, [pc, #56]	; (80008fc <uart_tx_init+0x88>)
 80008c2:	6a1b      	ldr	r3, [r3, #32]
 80008c4:	4a0d      	ldr	r2, [pc, #52]	; (80008fc <uart_tx_init+0x88>)
 80008c6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80008ca:	6213      	str	r3, [r2, #32]

	// Enable clock access to UART.
	RCC->APB1ENR |= USART2EN;
 80008cc:	4b0a      	ldr	r3, [pc, #40]	; (80008f8 <uart_tx_init+0x84>)
 80008ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008d0:	4a09      	ldr	r2, [pc, #36]	; (80008f8 <uart_tx_init+0x84>)
 80008d2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80008d6:	6413      	str	r3, [r2, #64]	; 0x40

	// Configure baud rate.
	uart_set_baudrate(APB1_CLK, UART_BAUDRATE);
 80008d8:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
 80008dc:	4808      	ldr	r0, [pc, #32]	; (8000900 <uart_tx_init+0x8c>)
 80008de:	f000 f82b 	bl	8000938 <uart_set_baudrate>

	// Set transfer direction to TX (we're transmitting)
	USART2->CR1 = CR1_TE;
 80008e2:	4b08      	ldr	r3, [pc, #32]	; (8000904 <uart_tx_init+0x90>)
 80008e4:	2208      	movs	r2, #8
 80008e6:	60da      	str	r2, [r3, #12]

	// Enable UART module.
	USART2->CR1 |= CR1_UE;
 80008e8:	4b06      	ldr	r3, [pc, #24]	; (8000904 <uart_tx_init+0x90>)
 80008ea:	68db      	ldr	r3, [r3, #12]
 80008ec:	4a05      	ldr	r2, [pc, #20]	; (8000904 <uart_tx_init+0x90>)
 80008ee:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80008f2:	60d3      	str	r3, [r2, #12]
}
 80008f4:	bf00      	nop
 80008f6:	bd80      	pop	{r7, pc}
 80008f8:	40023800 	.word	0x40023800
 80008fc:	40020000 	.word	0x40020000
 8000900:	00f42400 	.word	0x00f42400
 8000904:	40004400 	.word	0x40004400

08000908 <uart_write>:

static void uart_write(int ch)
{
 8000908:	b480      	push	{r7}
 800090a:	b083      	sub	sp, #12
 800090c:	af00      	add	r7, sp, #0
 800090e:	6078      	str	r0, [r7, #4]
	// Wait until transmit data reg is empty.
	while (!(USART2->SR & SR_TXE));
 8000910:	bf00      	nop
 8000912:	4b08      	ldr	r3, [pc, #32]	; (8000934 <uart_write+0x2c>)
 8000914:	681b      	ldr	r3, [r3, #0]
 8000916:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800091a:	2b00      	cmp	r3, #0
 800091c:	d0f9      	beq.n	8000912 <uart_write+0xa>

	// Write data to transmit.
	USART2->DR = (ch & 0xFF); // Transmit 8 bits representing the character ch.
 800091e:	687b      	ldr	r3, [r7, #4]
 8000920:	4a04      	ldr	r2, [pc, #16]	; (8000934 <uart_write+0x2c>)
 8000922:	b2db      	uxtb	r3, r3
 8000924:	6053      	str	r3, [r2, #4]
}
 8000926:	bf00      	nop
 8000928:	370c      	adds	r7, #12
 800092a:	46bd      	mov	sp, r7
 800092c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000930:	4770      	bx	lr
 8000932:	bf00      	nop
 8000934:	40004400 	.word	0x40004400

08000938 <uart_set_baudrate>:

static void uart_set_baudrate(uint32_t periph_clk, uint32_t baudrate)
{
 8000938:	b590      	push	{r4, r7, lr}
 800093a:	b083      	sub	sp, #12
 800093c:	af00      	add	r7, sp, #0
 800093e:	6078      	str	r0, [r7, #4]
 8000940:	6039      	str	r1, [r7, #0]
	USART2->BRR = compute_uart_bd(periph_clk, baudrate);
 8000942:	4c05      	ldr	r4, [pc, #20]	; (8000958 <uart_set_baudrate+0x20>)
 8000944:	6839      	ldr	r1, [r7, #0]
 8000946:	6878      	ldr	r0, [r7, #4]
 8000948:	f000 f808 	bl	800095c <compute_uart_bd>
 800094c:	4603      	mov	r3, r0
 800094e:	60a3      	str	r3, [r4, #8]
}
 8000950:	bf00      	nop
 8000952:	370c      	adds	r7, #12
 8000954:	46bd      	mov	sp, r7
 8000956:	bd90      	pop	{r4, r7, pc}
 8000958:	40004400 	.word	0x40004400

0800095c <compute_uart_bd>:

static uint32_t compute_uart_bd(uint32_t periph_clk, uint32_t baudrate)
{
 800095c:	b480      	push	{r7}
 800095e:	b083      	sub	sp, #12
 8000960:	af00      	add	r7, sp, #0
 8000962:	6078      	str	r0, [r7, #4]
 8000964:	6039      	str	r1, [r7, #0]
	return (periph_clk + (baudrate / 2)) / baudrate;
 8000966:	683b      	ldr	r3, [r7, #0]
 8000968:	085a      	lsrs	r2, r3, #1
 800096a:	687b      	ldr	r3, [r7, #4]
 800096c:	441a      	add	r2, r3
 800096e:	683b      	ldr	r3, [r7, #0]
 8000970:	fbb2 f3f3 	udiv	r3, r2, r3
}
 8000974:	4618      	mov	r0, r3
 8000976:	370c      	adds	r7, #12
 8000978:	46bd      	mov	sp, r7
 800097a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800097e:	4770      	bx	lr

08000980 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000980:	480d      	ldr	r0, [pc, #52]	; (80009b8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000982:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000984:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000988:	480c      	ldr	r0, [pc, #48]	; (80009bc <LoopForever+0x6>)
  ldr r1, =_edata
 800098a:	490d      	ldr	r1, [pc, #52]	; (80009c0 <LoopForever+0xa>)
  ldr r2, =_sidata
 800098c:	4a0d      	ldr	r2, [pc, #52]	; (80009c4 <LoopForever+0xe>)
  movs r3, #0
 800098e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000990:	e002      	b.n	8000998 <LoopCopyDataInit>

08000992 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000992:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000994:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000996:	3304      	adds	r3, #4

08000998 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000998:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800099a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800099c:	d3f9      	bcc.n	8000992 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800099e:	4a0a      	ldr	r2, [pc, #40]	; (80009c8 <LoopForever+0x12>)
  ldr r4, =_ebss
 80009a0:	4c0a      	ldr	r4, [pc, #40]	; (80009cc <LoopForever+0x16>)
  movs r3, #0
 80009a2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80009a4:	e001      	b.n	80009aa <LoopFillZerobss>

080009a6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80009a6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80009a8:	3204      	adds	r2, #4

080009aa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80009aa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80009ac:	d3fb      	bcc.n	80009a6 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80009ae:	f000 f97d 	bl	8000cac <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80009b2:	f7ff fc9b 	bl	80002ec <main>

080009b6 <LoopForever>:

LoopForever:
  b LoopForever
 80009b6:	e7fe      	b.n	80009b6 <LoopForever>
  ldr   r0, =_estack
 80009b8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80009bc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80009c0:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 80009c4:	080018f8 	.word	0x080018f8
  ldr r2, =_sbss
 80009c8:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 80009cc:	200014bc 	.word	0x200014bc

080009d0 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80009d0:	e7fe      	b.n	80009d0 <ADC_IRQHandler>
	...

080009d4 <std>:
 80009d4:	2300      	movs	r3, #0
 80009d6:	b510      	push	{r4, lr}
 80009d8:	4604      	mov	r4, r0
 80009da:	e9c0 3300 	strd	r3, r3, [r0]
 80009de:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80009e2:	6083      	str	r3, [r0, #8]
 80009e4:	8181      	strh	r1, [r0, #12]
 80009e6:	6643      	str	r3, [r0, #100]	; 0x64
 80009e8:	81c2      	strh	r2, [r0, #14]
 80009ea:	6183      	str	r3, [r0, #24]
 80009ec:	4619      	mov	r1, r3
 80009ee:	2208      	movs	r2, #8
 80009f0:	305c      	adds	r0, #92	; 0x5c
 80009f2:	f000 f906 	bl	8000c02 <memset>
 80009f6:	4b0d      	ldr	r3, [pc, #52]	; (8000a2c <std+0x58>)
 80009f8:	6263      	str	r3, [r4, #36]	; 0x24
 80009fa:	4b0d      	ldr	r3, [pc, #52]	; (8000a30 <std+0x5c>)
 80009fc:	62a3      	str	r3, [r4, #40]	; 0x28
 80009fe:	4b0d      	ldr	r3, [pc, #52]	; (8000a34 <std+0x60>)
 8000a00:	62e3      	str	r3, [r4, #44]	; 0x2c
 8000a02:	4b0d      	ldr	r3, [pc, #52]	; (8000a38 <std+0x64>)
 8000a04:	6323      	str	r3, [r4, #48]	; 0x30
 8000a06:	4b0d      	ldr	r3, [pc, #52]	; (8000a3c <std+0x68>)
 8000a08:	6224      	str	r4, [r4, #32]
 8000a0a:	429c      	cmp	r4, r3
 8000a0c:	d006      	beq.n	8000a1c <std+0x48>
 8000a0e:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8000a12:	4294      	cmp	r4, r2
 8000a14:	d002      	beq.n	8000a1c <std+0x48>
 8000a16:	33d0      	adds	r3, #208	; 0xd0
 8000a18:	429c      	cmp	r4, r3
 8000a1a:	d105      	bne.n	8000a28 <std+0x54>
 8000a1c:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8000a20:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000a24:	f000 b966 	b.w	8000cf4 <__retarget_lock_init_recursive>
 8000a28:	bd10      	pop	{r4, pc}
 8000a2a:	bf00      	nop
 8000a2c:	08000b7d 	.word	0x08000b7d
 8000a30:	08000b9f 	.word	0x08000b9f
 8000a34:	08000bd7 	.word	0x08000bd7
 8000a38:	08000bfb 	.word	0x08000bfb
 8000a3c:	20001370 	.word	0x20001370

08000a40 <stdio_exit_handler>:
 8000a40:	4a02      	ldr	r2, [pc, #8]	; (8000a4c <stdio_exit_handler+0xc>)
 8000a42:	4903      	ldr	r1, [pc, #12]	; (8000a50 <stdio_exit_handler+0x10>)
 8000a44:	4803      	ldr	r0, [pc, #12]	; (8000a54 <stdio_exit_handler+0x14>)
 8000a46:	f000 b869 	b.w	8000b1c <_fwalk_sglue>
 8000a4a:	bf00      	nop
 8000a4c:	20000000 	.word	0x20000000
 8000a50:	080015a1 	.word	0x080015a1
 8000a54:	2000000c 	.word	0x2000000c

08000a58 <cleanup_stdio>:
 8000a58:	6841      	ldr	r1, [r0, #4]
 8000a5a:	4b0c      	ldr	r3, [pc, #48]	; (8000a8c <cleanup_stdio+0x34>)
 8000a5c:	4299      	cmp	r1, r3
 8000a5e:	b510      	push	{r4, lr}
 8000a60:	4604      	mov	r4, r0
 8000a62:	d001      	beq.n	8000a68 <cleanup_stdio+0x10>
 8000a64:	f000 fd9c 	bl	80015a0 <_fflush_r>
 8000a68:	68a1      	ldr	r1, [r4, #8]
 8000a6a:	4b09      	ldr	r3, [pc, #36]	; (8000a90 <cleanup_stdio+0x38>)
 8000a6c:	4299      	cmp	r1, r3
 8000a6e:	d002      	beq.n	8000a76 <cleanup_stdio+0x1e>
 8000a70:	4620      	mov	r0, r4
 8000a72:	f000 fd95 	bl	80015a0 <_fflush_r>
 8000a76:	68e1      	ldr	r1, [r4, #12]
 8000a78:	4b06      	ldr	r3, [pc, #24]	; (8000a94 <cleanup_stdio+0x3c>)
 8000a7a:	4299      	cmp	r1, r3
 8000a7c:	d004      	beq.n	8000a88 <cleanup_stdio+0x30>
 8000a7e:	4620      	mov	r0, r4
 8000a80:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000a84:	f000 bd8c 	b.w	80015a0 <_fflush_r>
 8000a88:	bd10      	pop	{r4, pc}
 8000a8a:	bf00      	nop
 8000a8c:	20001370 	.word	0x20001370
 8000a90:	200013d8 	.word	0x200013d8
 8000a94:	20001440 	.word	0x20001440

08000a98 <global_stdio_init.part.0>:
 8000a98:	b510      	push	{r4, lr}
 8000a9a:	4b0b      	ldr	r3, [pc, #44]	; (8000ac8 <global_stdio_init.part.0+0x30>)
 8000a9c:	4c0b      	ldr	r4, [pc, #44]	; (8000acc <global_stdio_init.part.0+0x34>)
 8000a9e:	4a0c      	ldr	r2, [pc, #48]	; (8000ad0 <global_stdio_init.part.0+0x38>)
 8000aa0:	601a      	str	r2, [r3, #0]
 8000aa2:	4620      	mov	r0, r4
 8000aa4:	2200      	movs	r2, #0
 8000aa6:	2104      	movs	r1, #4
 8000aa8:	f7ff ff94 	bl	80009d4 <std>
 8000aac:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8000ab0:	2201      	movs	r2, #1
 8000ab2:	2109      	movs	r1, #9
 8000ab4:	f7ff ff8e 	bl	80009d4 <std>
 8000ab8:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8000abc:	2202      	movs	r2, #2
 8000abe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000ac2:	2112      	movs	r1, #18
 8000ac4:	f7ff bf86 	b.w	80009d4 <std>
 8000ac8:	200014a8 	.word	0x200014a8
 8000acc:	20001370 	.word	0x20001370
 8000ad0:	08000a41 	.word	0x08000a41

08000ad4 <__sfp_lock_acquire>:
 8000ad4:	4801      	ldr	r0, [pc, #4]	; (8000adc <__sfp_lock_acquire+0x8>)
 8000ad6:	f000 b90e 	b.w	8000cf6 <__retarget_lock_acquire_recursive>
 8000ada:	bf00      	nop
 8000adc:	200014b1 	.word	0x200014b1

08000ae0 <__sfp_lock_release>:
 8000ae0:	4801      	ldr	r0, [pc, #4]	; (8000ae8 <__sfp_lock_release+0x8>)
 8000ae2:	f000 b909 	b.w	8000cf8 <__retarget_lock_release_recursive>
 8000ae6:	bf00      	nop
 8000ae8:	200014b1 	.word	0x200014b1

08000aec <__sinit>:
 8000aec:	b510      	push	{r4, lr}
 8000aee:	4604      	mov	r4, r0
 8000af0:	f7ff fff0 	bl	8000ad4 <__sfp_lock_acquire>
 8000af4:	6a23      	ldr	r3, [r4, #32]
 8000af6:	b11b      	cbz	r3, 8000b00 <__sinit+0x14>
 8000af8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000afc:	f7ff bff0 	b.w	8000ae0 <__sfp_lock_release>
 8000b00:	4b04      	ldr	r3, [pc, #16]	; (8000b14 <__sinit+0x28>)
 8000b02:	6223      	str	r3, [r4, #32]
 8000b04:	4b04      	ldr	r3, [pc, #16]	; (8000b18 <__sinit+0x2c>)
 8000b06:	681b      	ldr	r3, [r3, #0]
 8000b08:	2b00      	cmp	r3, #0
 8000b0a:	d1f5      	bne.n	8000af8 <__sinit+0xc>
 8000b0c:	f7ff ffc4 	bl	8000a98 <global_stdio_init.part.0>
 8000b10:	e7f2      	b.n	8000af8 <__sinit+0xc>
 8000b12:	bf00      	nop
 8000b14:	08000a59 	.word	0x08000a59
 8000b18:	200014a8 	.word	0x200014a8

08000b1c <_fwalk_sglue>:
 8000b1c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000b20:	4607      	mov	r7, r0
 8000b22:	4688      	mov	r8, r1
 8000b24:	4614      	mov	r4, r2
 8000b26:	2600      	movs	r6, #0
 8000b28:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8000b2c:	f1b9 0901 	subs.w	r9, r9, #1
 8000b30:	d505      	bpl.n	8000b3e <_fwalk_sglue+0x22>
 8000b32:	6824      	ldr	r4, [r4, #0]
 8000b34:	2c00      	cmp	r4, #0
 8000b36:	d1f7      	bne.n	8000b28 <_fwalk_sglue+0xc>
 8000b38:	4630      	mov	r0, r6
 8000b3a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8000b3e:	89ab      	ldrh	r3, [r5, #12]
 8000b40:	2b01      	cmp	r3, #1
 8000b42:	d907      	bls.n	8000b54 <_fwalk_sglue+0x38>
 8000b44:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8000b48:	3301      	adds	r3, #1
 8000b4a:	d003      	beq.n	8000b54 <_fwalk_sglue+0x38>
 8000b4c:	4629      	mov	r1, r5
 8000b4e:	4638      	mov	r0, r7
 8000b50:	47c0      	blx	r8
 8000b52:	4306      	orrs	r6, r0
 8000b54:	3568      	adds	r5, #104	; 0x68
 8000b56:	e7e9      	b.n	8000b2c <_fwalk_sglue+0x10>

08000b58 <iprintf>:
 8000b58:	b40f      	push	{r0, r1, r2, r3}
 8000b5a:	b507      	push	{r0, r1, r2, lr}
 8000b5c:	4906      	ldr	r1, [pc, #24]	; (8000b78 <iprintf+0x20>)
 8000b5e:	ab04      	add	r3, sp, #16
 8000b60:	6808      	ldr	r0, [r1, #0]
 8000b62:	f853 2b04 	ldr.w	r2, [r3], #4
 8000b66:	6881      	ldr	r1, [r0, #8]
 8000b68:	9301      	str	r3, [sp, #4]
 8000b6a:	f000 f9e9 	bl	8000f40 <_vfiprintf_r>
 8000b6e:	b003      	add	sp, #12
 8000b70:	f85d eb04 	ldr.w	lr, [sp], #4
 8000b74:	b004      	add	sp, #16
 8000b76:	4770      	bx	lr
 8000b78:	20000058 	.word	0x20000058

08000b7c <__sread>:
 8000b7c:	b510      	push	{r4, lr}
 8000b7e:	460c      	mov	r4, r1
 8000b80:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000b84:	f000 f868 	bl	8000c58 <_read_r>
 8000b88:	2800      	cmp	r0, #0
 8000b8a:	bfab      	itete	ge
 8000b8c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8000b8e:	89a3      	ldrhlt	r3, [r4, #12]
 8000b90:	181b      	addge	r3, r3, r0
 8000b92:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8000b96:	bfac      	ite	ge
 8000b98:	6563      	strge	r3, [r4, #84]	; 0x54
 8000b9a:	81a3      	strhlt	r3, [r4, #12]
 8000b9c:	bd10      	pop	{r4, pc}

08000b9e <__swrite>:
 8000b9e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000ba2:	461f      	mov	r7, r3
 8000ba4:	898b      	ldrh	r3, [r1, #12]
 8000ba6:	05db      	lsls	r3, r3, #23
 8000ba8:	4605      	mov	r5, r0
 8000baa:	460c      	mov	r4, r1
 8000bac:	4616      	mov	r6, r2
 8000bae:	d505      	bpl.n	8000bbc <__swrite+0x1e>
 8000bb0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000bb4:	2302      	movs	r3, #2
 8000bb6:	2200      	movs	r2, #0
 8000bb8:	f000 f83c 	bl	8000c34 <_lseek_r>
 8000bbc:	89a3      	ldrh	r3, [r4, #12]
 8000bbe:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8000bc2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8000bc6:	81a3      	strh	r3, [r4, #12]
 8000bc8:	4632      	mov	r2, r6
 8000bca:	463b      	mov	r3, r7
 8000bcc:	4628      	mov	r0, r5
 8000bce:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8000bd2:	f000 b853 	b.w	8000c7c <_write_r>

08000bd6 <__sseek>:
 8000bd6:	b510      	push	{r4, lr}
 8000bd8:	460c      	mov	r4, r1
 8000bda:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000bde:	f000 f829 	bl	8000c34 <_lseek_r>
 8000be2:	1c43      	adds	r3, r0, #1
 8000be4:	89a3      	ldrh	r3, [r4, #12]
 8000be6:	bf15      	itete	ne
 8000be8:	6560      	strne	r0, [r4, #84]	; 0x54
 8000bea:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8000bee:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8000bf2:	81a3      	strheq	r3, [r4, #12]
 8000bf4:	bf18      	it	ne
 8000bf6:	81a3      	strhne	r3, [r4, #12]
 8000bf8:	bd10      	pop	{r4, pc}

08000bfa <__sclose>:
 8000bfa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000bfe:	f000 b809 	b.w	8000c14 <_close_r>

08000c02 <memset>:
 8000c02:	4402      	add	r2, r0
 8000c04:	4603      	mov	r3, r0
 8000c06:	4293      	cmp	r3, r2
 8000c08:	d100      	bne.n	8000c0c <memset+0xa>
 8000c0a:	4770      	bx	lr
 8000c0c:	f803 1b01 	strb.w	r1, [r3], #1
 8000c10:	e7f9      	b.n	8000c06 <memset+0x4>
	...

08000c14 <_close_r>:
 8000c14:	b538      	push	{r3, r4, r5, lr}
 8000c16:	4d06      	ldr	r5, [pc, #24]	; (8000c30 <_close_r+0x1c>)
 8000c18:	2300      	movs	r3, #0
 8000c1a:	4604      	mov	r4, r0
 8000c1c:	4608      	mov	r0, r1
 8000c1e:	602b      	str	r3, [r5, #0]
 8000c20:	f7ff fdb2 	bl	8000788 <_close>
 8000c24:	1c43      	adds	r3, r0, #1
 8000c26:	d102      	bne.n	8000c2e <_close_r+0x1a>
 8000c28:	682b      	ldr	r3, [r5, #0]
 8000c2a:	b103      	cbz	r3, 8000c2e <_close_r+0x1a>
 8000c2c:	6023      	str	r3, [r4, #0]
 8000c2e:	bd38      	pop	{r3, r4, r5, pc}
 8000c30:	200014ac 	.word	0x200014ac

08000c34 <_lseek_r>:
 8000c34:	b538      	push	{r3, r4, r5, lr}
 8000c36:	4d07      	ldr	r5, [pc, #28]	; (8000c54 <_lseek_r+0x20>)
 8000c38:	4604      	mov	r4, r0
 8000c3a:	4608      	mov	r0, r1
 8000c3c:	4611      	mov	r1, r2
 8000c3e:	2200      	movs	r2, #0
 8000c40:	602a      	str	r2, [r5, #0]
 8000c42:	461a      	mov	r2, r3
 8000c44:	f7ff fdc7 	bl	80007d6 <_lseek>
 8000c48:	1c43      	adds	r3, r0, #1
 8000c4a:	d102      	bne.n	8000c52 <_lseek_r+0x1e>
 8000c4c:	682b      	ldr	r3, [r5, #0]
 8000c4e:	b103      	cbz	r3, 8000c52 <_lseek_r+0x1e>
 8000c50:	6023      	str	r3, [r4, #0]
 8000c52:	bd38      	pop	{r3, r4, r5, pc}
 8000c54:	200014ac 	.word	0x200014ac

08000c58 <_read_r>:
 8000c58:	b538      	push	{r3, r4, r5, lr}
 8000c5a:	4d07      	ldr	r5, [pc, #28]	; (8000c78 <_read_r+0x20>)
 8000c5c:	4604      	mov	r4, r0
 8000c5e:	4608      	mov	r0, r1
 8000c60:	4611      	mov	r1, r2
 8000c62:	2200      	movs	r2, #0
 8000c64:	602a      	str	r2, [r5, #0]
 8000c66:	461a      	mov	r2, r3
 8000c68:	f7ff fd55 	bl	8000716 <_read>
 8000c6c:	1c43      	adds	r3, r0, #1
 8000c6e:	d102      	bne.n	8000c76 <_read_r+0x1e>
 8000c70:	682b      	ldr	r3, [r5, #0]
 8000c72:	b103      	cbz	r3, 8000c76 <_read_r+0x1e>
 8000c74:	6023      	str	r3, [r4, #0]
 8000c76:	bd38      	pop	{r3, r4, r5, pc}
 8000c78:	200014ac 	.word	0x200014ac

08000c7c <_write_r>:
 8000c7c:	b538      	push	{r3, r4, r5, lr}
 8000c7e:	4d07      	ldr	r5, [pc, #28]	; (8000c9c <_write_r+0x20>)
 8000c80:	4604      	mov	r4, r0
 8000c82:	4608      	mov	r0, r1
 8000c84:	4611      	mov	r1, r2
 8000c86:	2200      	movs	r2, #0
 8000c88:	602a      	str	r2, [r5, #0]
 8000c8a:	461a      	mov	r2, r3
 8000c8c:	f7ff fd60 	bl	8000750 <_write>
 8000c90:	1c43      	adds	r3, r0, #1
 8000c92:	d102      	bne.n	8000c9a <_write_r+0x1e>
 8000c94:	682b      	ldr	r3, [r5, #0]
 8000c96:	b103      	cbz	r3, 8000c9a <_write_r+0x1e>
 8000c98:	6023      	str	r3, [r4, #0]
 8000c9a:	bd38      	pop	{r3, r4, r5, pc}
 8000c9c:	200014ac 	.word	0x200014ac

08000ca0 <__errno>:
 8000ca0:	4b01      	ldr	r3, [pc, #4]	; (8000ca8 <__errno+0x8>)
 8000ca2:	6818      	ldr	r0, [r3, #0]
 8000ca4:	4770      	bx	lr
 8000ca6:	bf00      	nop
 8000ca8:	20000058 	.word	0x20000058

08000cac <__libc_init_array>:
 8000cac:	b570      	push	{r4, r5, r6, lr}
 8000cae:	4d0d      	ldr	r5, [pc, #52]	; (8000ce4 <__libc_init_array+0x38>)
 8000cb0:	4c0d      	ldr	r4, [pc, #52]	; (8000ce8 <__libc_init_array+0x3c>)
 8000cb2:	1b64      	subs	r4, r4, r5
 8000cb4:	10a4      	asrs	r4, r4, #2
 8000cb6:	2600      	movs	r6, #0
 8000cb8:	42a6      	cmp	r6, r4
 8000cba:	d109      	bne.n	8000cd0 <__libc_init_array+0x24>
 8000cbc:	4d0b      	ldr	r5, [pc, #44]	; (8000cec <__libc_init_array+0x40>)
 8000cbe:	4c0c      	ldr	r4, [pc, #48]	; (8000cf0 <__libc_init_array+0x44>)
 8000cc0:	f000 fdc0 	bl	8001844 <_init>
 8000cc4:	1b64      	subs	r4, r4, r5
 8000cc6:	10a4      	asrs	r4, r4, #2
 8000cc8:	2600      	movs	r6, #0
 8000cca:	42a6      	cmp	r6, r4
 8000ccc:	d105      	bne.n	8000cda <__libc_init_array+0x2e>
 8000cce:	bd70      	pop	{r4, r5, r6, pc}
 8000cd0:	f855 3b04 	ldr.w	r3, [r5], #4
 8000cd4:	4798      	blx	r3
 8000cd6:	3601      	adds	r6, #1
 8000cd8:	e7ee      	b.n	8000cb8 <__libc_init_array+0xc>
 8000cda:	f855 3b04 	ldr.w	r3, [r5], #4
 8000cde:	4798      	blx	r3
 8000ce0:	3601      	adds	r6, #1
 8000ce2:	e7f2      	b.n	8000cca <__libc_init_array+0x1e>
 8000ce4:	080018f0 	.word	0x080018f0
 8000ce8:	080018f0 	.word	0x080018f0
 8000cec:	080018f0 	.word	0x080018f0
 8000cf0:	080018f4 	.word	0x080018f4

08000cf4 <__retarget_lock_init_recursive>:
 8000cf4:	4770      	bx	lr

08000cf6 <__retarget_lock_acquire_recursive>:
 8000cf6:	4770      	bx	lr

08000cf8 <__retarget_lock_release_recursive>:
 8000cf8:	4770      	bx	lr
	...

08000cfc <_free_r>:
 8000cfc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8000cfe:	2900      	cmp	r1, #0
 8000d00:	d044      	beq.n	8000d8c <_free_r+0x90>
 8000d02:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8000d06:	9001      	str	r0, [sp, #4]
 8000d08:	2b00      	cmp	r3, #0
 8000d0a:	f1a1 0404 	sub.w	r4, r1, #4
 8000d0e:	bfb8      	it	lt
 8000d10:	18e4      	addlt	r4, r4, r3
 8000d12:	f000 f8df 	bl	8000ed4 <__malloc_lock>
 8000d16:	4a1e      	ldr	r2, [pc, #120]	; (8000d90 <_free_r+0x94>)
 8000d18:	9801      	ldr	r0, [sp, #4]
 8000d1a:	6813      	ldr	r3, [r2, #0]
 8000d1c:	b933      	cbnz	r3, 8000d2c <_free_r+0x30>
 8000d1e:	6063      	str	r3, [r4, #4]
 8000d20:	6014      	str	r4, [r2, #0]
 8000d22:	b003      	add	sp, #12
 8000d24:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8000d28:	f000 b8da 	b.w	8000ee0 <__malloc_unlock>
 8000d2c:	42a3      	cmp	r3, r4
 8000d2e:	d908      	bls.n	8000d42 <_free_r+0x46>
 8000d30:	6825      	ldr	r5, [r4, #0]
 8000d32:	1961      	adds	r1, r4, r5
 8000d34:	428b      	cmp	r3, r1
 8000d36:	bf01      	itttt	eq
 8000d38:	6819      	ldreq	r1, [r3, #0]
 8000d3a:	685b      	ldreq	r3, [r3, #4]
 8000d3c:	1949      	addeq	r1, r1, r5
 8000d3e:	6021      	streq	r1, [r4, #0]
 8000d40:	e7ed      	b.n	8000d1e <_free_r+0x22>
 8000d42:	461a      	mov	r2, r3
 8000d44:	685b      	ldr	r3, [r3, #4]
 8000d46:	b10b      	cbz	r3, 8000d4c <_free_r+0x50>
 8000d48:	42a3      	cmp	r3, r4
 8000d4a:	d9fa      	bls.n	8000d42 <_free_r+0x46>
 8000d4c:	6811      	ldr	r1, [r2, #0]
 8000d4e:	1855      	adds	r5, r2, r1
 8000d50:	42a5      	cmp	r5, r4
 8000d52:	d10b      	bne.n	8000d6c <_free_r+0x70>
 8000d54:	6824      	ldr	r4, [r4, #0]
 8000d56:	4421      	add	r1, r4
 8000d58:	1854      	adds	r4, r2, r1
 8000d5a:	42a3      	cmp	r3, r4
 8000d5c:	6011      	str	r1, [r2, #0]
 8000d5e:	d1e0      	bne.n	8000d22 <_free_r+0x26>
 8000d60:	681c      	ldr	r4, [r3, #0]
 8000d62:	685b      	ldr	r3, [r3, #4]
 8000d64:	6053      	str	r3, [r2, #4]
 8000d66:	440c      	add	r4, r1
 8000d68:	6014      	str	r4, [r2, #0]
 8000d6a:	e7da      	b.n	8000d22 <_free_r+0x26>
 8000d6c:	d902      	bls.n	8000d74 <_free_r+0x78>
 8000d6e:	230c      	movs	r3, #12
 8000d70:	6003      	str	r3, [r0, #0]
 8000d72:	e7d6      	b.n	8000d22 <_free_r+0x26>
 8000d74:	6825      	ldr	r5, [r4, #0]
 8000d76:	1961      	adds	r1, r4, r5
 8000d78:	428b      	cmp	r3, r1
 8000d7a:	bf04      	itt	eq
 8000d7c:	6819      	ldreq	r1, [r3, #0]
 8000d7e:	685b      	ldreq	r3, [r3, #4]
 8000d80:	6063      	str	r3, [r4, #4]
 8000d82:	bf04      	itt	eq
 8000d84:	1949      	addeq	r1, r1, r5
 8000d86:	6021      	streq	r1, [r4, #0]
 8000d88:	6054      	str	r4, [r2, #4]
 8000d8a:	e7ca      	b.n	8000d22 <_free_r+0x26>
 8000d8c:	b003      	add	sp, #12
 8000d8e:	bd30      	pop	{r4, r5, pc}
 8000d90:	200014b4 	.word	0x200014b4

08000d94 <sbrk_aligned>:
 8000d94:	b570      	push	{r4, r5, r6, lr}
 8000d96:	4e0e      	ldr	r6, [pc, #56]	; (8000dd0 <sbrk_aligned+0x3c>)
 8000d98:	460c      	mov	r4, r1
 8000d9a:	6831      	ldr	r1, [r6, #0]
 8000d9c:	4605      	mov	r5, r0
 8000d9e:	b911      	cbnz	r1, 8000da6 <sbrk_aligned+0x12>
 8000da0:	f000 fcbc 	bl	800171c <_sbrk_r>
 8000da4:	6030      	str	r0, [r6, #0]
 8000da6:	4621      	mov	r1, r4
 8000da8:	4628      	mov	r0, r5
 8000daa:	f000 fcb7 	bl	800171c <_sbrk_r>
 8000dae:	1c43      	adds	r3, r0, #1
 8000db0:	d00a      	beq.n	8000dc8 <sbrk_aligned+0x34>
 8000db2:	1cc4      	adds	r4, r0, #3
 8000db4:	f024 0403 	bic.w	r4, r4, #3
 8000db8:	42a0      	cmp	r0, r4
 8000dba:	d007      	beq.n	8000dcc <sbrk_aligned+0x38>
 8000dbc:	1a21      	subs	r1, r4, r0
 8000dbe:	4628      	mov	r0, r5
 8000dc0:	f000 fcac 	bl	800171c <_sbrk_r>
 8000dc4:	3001      	adds	r0, #1
 8000dc6:	d101      	bne.n	8000dcc <sbrk_aligned+0x38>
 8000dc8:	f04f 34ff 	mov.w	r4, #4294967295
 8000dcc:	4620      	mov	r0, r4
 8000dce:	bd70      	pop	{r4, r5, r6, pc}
 8000dd0:	200014b8 	.word	0x200014b8

08000dd4 <_malloc_r>:
 8000dd4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000dd8:	1ccd      	adds	r5, r1, #3
 8000dda:	f025 0503 	bic.w	r5, r5, #3
 8000dde:	3508      	adds	r5, #8
 8000de0:	2d0c      	cmp	r5, #12
 8000de2:	bf38      	it	cc
 8000de4:	250c      	movcc	r5, #12
 8000de6:	2d00      	cmp	r5, #0
 8000de8:	4607      	mov	r7, r0
 8000dea:	db01      	blt.n	8000df0 <_malloc_r+0x1c>
 8000dec:	42a9      	cmp	r1, r5
 8000dee:	d905      	bls.n	8000dfc <_malloc_r+0x28>
 8000df0:	230c      	movs	r3, #12
 8000df2:	603b      	str	r3, [r7, #0]
 8000df4:	2600      	movs	r6, #0
 8000df6:	4630      	mov	r0, r6
 8000df8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8000dfc:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8000ed0 <_malloc_r+0xfc>
 8000e00:	f000 f868 	bl	8000ed4 <__malloc_lock>
 8000e04:	f8d8 3000 	ldr.w	r3, [r8]
 8000e08:	461c      	mov	r4, r3
 8000e0a:	bb5c      	cbnz	r4, 8000e64 <_malloc_r+0x90>
 8000e0c:	4629      	mov	r1, r5
 8000e0e:	4638      	mov	r0, r7
 8000e10:	f7ff ffc0 	bl	8000d94 <sbrk_aligned>
 8000e14:	1c43      	adds	r3, r0, #1
 8000e16:	4604      	mov	r4, r0
 8000e18:	d155      	bne.n	8000ec6 <_malloc_r+0xf2>
 8000e1a:	f8d8 4000 	ldr.w	r4, [r8]
 8000e1e:	4626      	mov	r6, r4
 8000e20:	2e00      	cmp	r6, #0
 8000e22:	d145      	bne.n	8000eb0 <_malloc_r+0xdc>
 8000e24:	2c00      	cmp	r4, #0
 8000e26:	d048      	beq.n	8000eba <_malloc_r+0xe6>
 8000e28:	6823      	ldr	r3, [r4, #0]
 8000e2a:	4631      	mov	r1, r6
 8000e2c:	4638      	mov	r0, r7
 8000e2e:	eb04 0903 	add.w	r9, r4, r3
 8000e32:	f000 fc73 	bl	800171c <_sbrk_r>
 8000e36:	4581      	cmp	r9, r0
 8000e38:	d13f      	bne.n	8000eba <_malloc_r+0xe6>
 8000e3a:	6821      	ldr	r1, [r4, #0]
 8000e3c:	1a6d      	subs	r5, r5, r1
 8000e3e:	4629      	mov	r1, r5
 8000e40:	4638      	mov	r0, r7
 8000e42:	f7ff ffa7 	bl	8000d94 <sbrk_aligned>
 8000e46:	3001      	adds	r0, #1
 8000e48:	d037      	beq.n	8000eba <_malloc_r+0xe6>
 8000e4a:	6823      	ldr	r3, [r4, #0]
 8000e4c:	442b      	add	r3, r5
 8000e4e:	6023      	str	r3, [r4, #0]
 8000e50:	f8d8 3000 	ldr.w	r3, [r8]
 8000e54:	2b00      	cmp	r3, #0
 8000e56:	d038      	beq.n	8000eca <_malloc_r+0xf6>
 8000e58:	685a      	ldr	r2, [r3, #4]
 8000e5a:	42a2      	cmp	r2, r4
 8000e5c:	d12b      	bne.n	8000eb6 <_malloc_r+0xe2>
 8000e5e:	2200      	movs	r2, #0
 8000e60:	605a      	str	r2, [r3, #4]
 8000e62:	e00f      	b.n	8000e84 <_malloc_r+0xb0>
 8000e64:	6822      	ldr	r2, [r4, #0]
 8000e66:	1b52      	subs	r2, r2, r5
 8000e68:	d41f      	bmi.n	8000eaa <_malloc_r+0xd6>
 8000e6a:	2a0b      	cmp	r2, #11
 8000e6c:	d917      	bls.n	8000e9e <_malloc_r+0xca>
 8000e6e:	1961      	adds	r1, r4, r5
 8000e70:	42a3      	cmp	r3, r4
 8000e72:	6025      	str	r5, [r4, #0]
 8000e74:	bf18      	it	ne
 8000e76:	6059      	strne	r1, [r3, #4]
 8000e78:	6863      	ldr	r3, [r4, #4]
 8000e7a:	bf08      	it	eq
 8000e7c:	f8c8 1000 	streq.w	r1, [r8]
 8000e80:	5162      	str	r2, [r4, r5]
 8000e82:	604b      	str	r3, [r1, #4]
 8000e84:	4638      	mov	r0, r7
 8000e86:	f104 060b 	add.w	r6, r4, #11
 8000e8a:	f000 f829 	bl	8000ee0 <__malloc_unlock>
 8000e8e:	f026 0607 	bic.w	r6, r6, #7
 8000e92:	1d23      	adds	r3, r4, #4
 8000e94:	1af2      	subs	r2, r6, r3
 8000e96:	d0ae      	beq.n	8000df6 <_malloc_r+0x22>
 8000e98:	1b9b      	subs	r3, r3, r6
 8000e9a:	50a3      	str	r3, [r4, r2]
 8000e9c:	e7ab      	b.n	8000df6 <_malloc_r+0x22>
 8000e9e:	42a3      	cmp	r3, r4
 8000ea0:	6862      	ldr	r2, [r4, #4]
 8000ea2:	d1dd      	bne.n	8000e60 <_malloc_r+0x8c>
 8000ea4:	f8c8 2000 	str.w	r2, [r8]
 8000ea8:	e7ec      	b.n	8000e84 <_malloc_r+0xb0>
 8000eaa:	4623      	mov	r3, r4
 8000eac:	6864      	ldr	r4, [r4, #4]
 8000eae:	e7ac      	b.n	8000e0a <_malloc_r+0x36>
 8000eb0:	4634      	mov	r4, r6
 8000eb2:	6876      	ldr	r6, [r6, #4]
 8000eb4:	e7b4      	b.n	8000e20 <_malloc_r+0x4c>
 8000eb6:	4613      	mov	r3, r2
 8000eb8:	e7cc      	b.n	8000e54 <_malloc_r+0x80>
 8000eba:	230c      	movs	r3, #12
 8000ebc:	603b      	str	r3, [r7, #0]
 8000ebe:	4638      	mov	r0, r7
 8000ec0:	f000 f80e 	bl	8000ee0 <__malloc_unlock>
 8000ec4:	e797      	b.n	8000df6 <_malloc_r+0x22>
 8000ec6:	6025      	str	r5, [r4, #0]
 8000ec8:	e7dc      	b.n	8000e84 <_malloc_r+0xb0>
 8000eca:	605b      	str	r3, [r3, #4]
 8000ecc:	deff      	udf	#255	; 0xff
 8000ece:	bf00      	nop
 8000ed0:	200014b4 	.word	0x200014b4

08000ed4 <__malloc_lock>:
 8000ed4:	4801      	ldr	r0, [pc, #4]	; (8000edc <__malloc_lock+0x8>)
 8000ed6:	f7ff bf0e 	b.w	8000cf6 <__retarget_lock_acquire_recursive>
 8000eda:	bf00      	nop
 8000edc:	200014b0 	.word	0x200014b0

08000ee0 <__malloc_unlock>:
 8000ee0:	4801      	ldr	r0, [pc, #4]	; (8000ee8 <__malloc_unlock+0x8>)
 8000ee2:	f7ff bf09 	b.w	8000cf8 <__retarget_lock_release_recursive>
 8000ee6:	bf00      	nop
 8000ee8:	200014b0 	.word	0x200014b0

08000eec <__sfputc_r>:
 8000eec:	6893      	ldr	r3, [r2, #8]
 8000eee:	3b01      	subs	r3, #1
 8000ef0:	2b00      	cmp	r3, #0
 8000ef2:	b410      	push	{r4}
 8000ef4:	6093      	str	r3, [r2, #8]
 8000ef6:	da08      	bge.n	8000f0a <__sfputc_r+0x1e>
 8000ef8:	6994      	ldr	r4, [r2, #24]
 8000efa:	42a3      	cmp	r3, r4
 8000efc:	db01      	blt.n	8000f02 <__sfputc_r+0x16>
 8000efe:	290a      	cmp	r1, #10
 8000f00:	d103      	bne.n	8000f0a <__sfputc_r+0x1e>
 8000f02:	f85d 4b04 	ldr.w	r4, [sp], #4
 8000f06:	f000 bb73 	b.w	80015f0 <__swbuf_r>
 8000f0a:	6813      	ldr	r3, [r2, #0]
 8000f0c:	1c58      	adds	r0, r3, #1
 8000f0e:	6010      	str	r0, [r2, #0]
 8000f10:	7019      	strb	r1, [r3, #0]
 8000f12:	4608      	mov	r0, r1
 8000f14:	f85d 4b04 	ldr.w	r4, [sp], #4
 8000f18:	4770      	bx	lr

08000f1a <__sfputs_r>:
 8000f1a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000f1c:	4606      	mov	r6, r0
 8000f1e:	460f      	mov	r7, r1
 8000f20:	4614      	mov	r4, r2
 8000f22:	18d5      	adds	r5, r2, r3
 8000f24:	42ac      	cmp	r4, r5
 8000f26:	d101      	bne.n	8000f2c <__sfputs_r+0x12>
 8000f28:	2000      	movs	r0, #0
 8000f2a:	e007      	b.n	8000f3c <__sfputs_r+0x22>
 8000f2c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8000f30:	463a      	mov	r2, r7
 8000f32:	4630      	mov	r0, r6
 8000f34:	f7ff ffda 	bl	8000eec <__sfputc_r>
 8000f38:	1c43      	adds	r3, r0, #1
 8000f3a:	d1f3      	bne.n	8000f24 <__sfputs_r+0xa>
 8000f3c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08000f40 <_vfiprintf_r>:
 8000f40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000f44:	460d      	mov	r5, r1
 8000f46:	b09d      	sub	sp, #116	; 0x74
 8000f48:	4614      	mov	r4, r2
 8000f4a:	4698      	mov	r8, r3
 8000f4c:	4606      	mov	r6, r0
 8000f4e:	b118      	cbz	r0, 8000f58 <_vfiprintf_r+0x18>
 8000f50:	6a03      	ldr	r3, [r0, #32]
 8000f52:	b90b      	cbnz	r3, 8000f58 <_vfiprintf_r+0x18>
 8000f54:	f7ff fdca 	bl	8000aec <__sinit>
 8000f58:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8000f5a:	07d9      	lsls	r1, r3, #31
 8000f5c:	d405      	bmi.n	8000f6a <_vfiprintf_r+0x2a>
 8000f5e:	89ab      	ldrh	r3, [r5, #12]
 8000f60:	059a      	lsls	r2, r3, #22
 8000f62:	d402      	bmi.n	8000f6a <_vfiprintf_r+0x2a>
 8000f64:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8000f66:	f7ff fec6 	bl	8000cf6 <__retarget_lock_acquire_recursive>
 8000f6a:	89ab      	ldrh	r3, [r5, #12]
 8000f6c:	071b      	lsls	r3, r3, #28
 8000f6e:	d501      	bpl.n	8000f74 <_vfiprintf_r+0x34>
 8000f70:	692b      	ldr	r3, [r5, #16]
 8000f72:	b99b      	cbnz	r3, 8000f9c <_vfiprintf_r+0x5c>
 8000f74:	4629      	mov	r1, r5
 8000f76:	4630      	mov	r0, r6
 8000f78:	f000 fb78 	bl	800166c <__swsetup_r>
 8000f7c:	b170      	cbz	r0, 8000f9c <_vfiprintf_r+0x5c>
 8000f7e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8000f80:	07dc      	lsls	r4, r3, #31
 8000f82:	d504      	bpl.n	8000f8e <_vfiprintf_r+0x4e>
 8000f84:	f04f 30ff 	mov.w	r0, #4294967295
 8000f88:	b01d      	add	sp, #116	; 0x74
 8000f8a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000f8e:	89ab      	ldrh	r3, [r5, #12]
 8000f90:	0598      	lsls	r0, r3, #22
 8000f92:	d4f7      	bmi.n	8000f84 <_vfiprintf_r+0x44>
 8000f94:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8000f96:	f7ff feaf 	bl	8000cf8 <__retarget_lock_release_recursive>
 8000f9a:	e7f3      	b.n	8000f84 <_vfiprintf_r+0x44>
 8000f9c:	2300      	movs	r3, #0
 8000f9e:	9309      	str	r3, [sp, #36]	; 0x24
 8000fa0:	2320      	movs	r3, #32
 8000fa2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8000fa6:	f8cd 800c 	str.w	r8, [sp, #12]
 8000faa:	2330      	movs	r3, #48	; 0x30
 8000fac:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8001160 <_vfiprintf_r+0x220>
 8000fb0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8000fb4:	f04f 0901 	mov.w	r9, #1
 8000fb8:	4623      	mov	r3, r4
 8000fba:	469a      	mov	sl, r3
 8000fbc:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000fc0:	b10a      	cbz	r2, 8000fc6 <_vfiprintf_r+0x86>
 8000fc2:	2a25      	cmp	r2, #37	; 0x25
 8000fc4:	d1f9      	bne.n	8000fba <_vfiprintf_r+0x7a>
 8000fc6:	ebba 0b04 	subs.w	fp, sl, r4
 8000fca:	d00b      	beq.n	8000fe4 <_vfiprintf_r+0xa4>
 8000fcc:	465b      	mov	r3, fp
 8000fce:	4622      	mov	r2, r4
 8000fd0:	4629      	mov	r1, r5
 8000fd2:	4630      	mov	r0, r6
 8000fd4:	f7ff ffa1 	bl	8000f1a <__sfputs_r>
 8000fd8:	3001      	adds	r0, #1
 8000fda:	f000 80a9 	beq.w	8001130 <_vfiprintf_r+0x1f0>
 8000fde:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8000fe0:	445a      	add	r2, fp
 8000fe2:	9209      	str	r2, [sp, #36]	; 0x24
 8000fe4:	f89a 3000 	ldrb.w	r3, [sl]
 8000fe8:	2b00      	cmp	r3, #0
 8000fea:	f000 80a1 	beq.w	8001130 <_vfiprintf_r+0x1f0>
 8000fee:	2300      	movs	r3, #0
 8000ff0:	f04f 32ff 	mov.w	r2, #4294967295
 8000ff4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8000ff8:	f10a 0a01 	add.w	sl, sl, #1
 8000ffc:	9304      	str	r3, [sp, #16]
 8000ffe:	9307      	str	r3, [sp, #28]
 8001000:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8001004:	931a      	str	r3, [sp, #104]	; 0x68
 8001006:	4654      	mov	r4, sl
 8001008:	2205      	movs	r2, #5
 800100a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800100e:	4854      	ldr	r0, [pc, #336]	; (8001160 <_vfiprintf_r+0x220>)
 8001010:	f7ff f8e6 	bl	80001e0 <memchr>
 8001014:	9a04      	ldr	r2, [sp, #16]
 8001016:	b9d8      	cbnz	r0, 8001050 <_vfiprintf_r+0x110>
 8001018:	06d1      	lsls	r1, r2, #27
 800101a:	bf44      	itt	mi
 800101c:	2320      	movmi	r3, #32
 800101e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8001022:	0713      	lsls	r3, r2, #28
 8001024:	bf44      	itt	mi
 8001026:	232b      	movmi	r3, #43	; 0x2b
 8001028:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800102c:	f89a 3000 	ldrb.w	r3, [sl]
 8001030:	2b2a      	cmp	r3, #42	; 0x2a
 8001032:	d015      	beq.n	8001060 <_vfiprintf_r+0x120>
 8001034:	9a07      	ldr	r2, [sp, #28]
 8001036:	4654      	mov	r4, sl
 8001038:	2000      	movs	r0, #0
 800103a:	f04f 0c0a 	mov.w	ip, #10
 800103e:	4621      	mov	r1, r4
 8001040:	f811 3b01 	ldrb.w	r3, [r1], #1
 8001044:	3b30      	subs	r3, #48	; 0x30
 8001046:	2b09      	cmp	r3, #9
 8001048:	d94d      	bls.n	80010e6 <_vfiprintf_r+0x1a6>
 800104a:	b1b0      	cbz	r0, 800107a <_vfiprintf_r+0x13a>
 800104c:	9207      	str	r2, [sp, #28]
 800104e:	e014      	b.n	800107a <_vfiprintf_r+0x13a>
 8001050:	eba0 0308 	sub.w	r3, r0, r8
 8001054:	fa09 f303 	lsl.w	r3, r9, r3
 8001058:	4313      	orrs	r3, r2
 800105a:	9304      	str	r3, [sp, #16]
 800105c:	46a2      	mov	sl, r4
 800105e:	e7d2      	b.n	8001006 <_vfiprintf_r+0xc6>
 8001060:	9b03      	ldr	r3, [sp, #12]
 8001062:	1d19      	adds	r1, r3, #4
 8001064:	681b      	ldr	r3, [r3, #0]
 8001066:	9103      	str	r1, [sp, #12]
 8001068:	2b00      	cmp	r3, #0
 800106a:	bfbb      	ittet	lt
 800106c:	425b      	neglt	r3, r3
 800106e:	f042 0202 	orrlt.w	r2, r2, #2
 8001072:	9307      	strge	r3, [sp, #28]
 8001074:	9307      	strlt	r3, [sp, #28]
 8001076:	bfb8      	it	lt
 8001078:	9204      	strlt	r2, [sp, #16]
 800107a:	7823      	ldrb	r3, [r4, #0]
 800107c:	2b2e      	cmp	r3, #46	; 0x2e
 800107e:	d10c      	bne.n	800109a <_vfiprintf_r+0x15a>
 8001080:	7863      	ldrb	r3, [r4, #1]
 8001082:	2b2a      	cmp	r3, #42	; 0x2a
 8001084:	d134      	bne.n	80010f0 <_vfiprintf_r+0x1b0>
 8001086:	9b03      	ldr	r3, [sp, #12]
 8001088:	1d1a      	adds	r2, r3, #4
 800108a:	681b      	ldr	r3, [r3, #0]
 800108c:	9203      	str	r2, [sp, #12]
 800108e:	2b00      	cmp	r3, #0
 8001090:	bfb8      	it	lt
 8001092:	f04f 33ff 	movlt.w	r3, #4294967295
 8001096:	3402      	adds	r4, #2
 8001098:	9305      	str	r3, [sp, #20]
 800109a:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8001170 <_vfiprintf_r+0x230>
 800109e:	7821      	ldrb	r1, [r4, #0]
 80010a0:	2203      	movs	r2, #3
 80010a2:	4650      	mov	r0, sl
 80010a4:	f7ff f89c 	bl	80001e0 <memchr>
 80010a8:	b138      	cbz	r0, 80010ba <_vfiprintf_r+0x17a>
 80010aa:	9b04      	ldr	r3, [sp, #16]
 80010ac:	eba0 000a 	sub.w	r0, r0, sl
 80010b0:	2240      	movs	r2, #64	; 0x40
 80010b2:	4082      	lsls	r2, r0
 80010b4:	4313      	orrs	r3, r2
 80010b6:	3401      	adds	r4, #1
 80010b8:	9304      	str	r3, [sp, #16]
 80010ba:	f814 1b01 	ldrb.w	r1, [r4], #1
 80010be:	4829      	ldr	r0, [pc, #164]	; (8001164 <_vfiprintf_r+0x224>)
 80010c0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80010c4:	2206      	movs	r2, #6
 80010c6:	f7ff f88b 	bl	80001e0 <memchr>
 80010ca:	2800      	cmp	r0, #0
 80010cc:	d03f      	beq.n	800114e <_vfiprintf_r+0x20e>
 80010ce:	4b26      	ldr	r3, [pc, #152]	; (8001168 <_vfiprintf_r+0x228>)
 80010d0:	bb1b      	cbnz	r3, 800111a <_vfiprintf_r+0x1da>
 80010d2:	9b03      	ldr	r3, [sp, #12]
 80010d4:	3307      	adds	r3, #7
 80010d6:	f023 0307 	bic.w	r3, r3, #7
 80010da:	3308      	adds	r3, #8
 80010dc:	9303      	str	r3, [sp, #12]
 80010de:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80010e0:	443b      	add	r3, r7
 80010e2:	9309      	str	r3, [sp, #36]	; 0x24
 80010e4:	e768      	b.n	8000fb8 <_vfiprintf_r+0x78>
 80010e6:	fb0c 3202 	mla	r2, ip, r2, r3
 80010ea:	460c      	mov	r4, r1
 80010ec:	2001      	movs	r0, #1
 80010ee:	e7a6      	b.n	800103e <_vfiprintf_r+0xfe>
 80010f0:	2300      	movs	r3, #0
 80010f2:	3401      	adds	r4, #1
 80010f4:	9305      	str	r3, [sp, #20]
 80010f6:	4619      	mov	r1, r3
 80010f8:	f04f 0c0a 	mov.w	ip, #10
 80010fc:	4620      	mov	r0, r4
 80010fe:	f810 2b01 	ldrb.w	r2, [r0], #1
 8001102:	3a30      	subs	r2, #48	; 0x30
 8001104:	2a09      	cmp	r2, #9
 8001106:	d903      	bls.n	8001110 <_vfiprintf_r+0x1d0>
 8001108:	2b00      	cmp	r3, #0
 800110a:	d0c6      	beq.n	800109a <_vfiprintf_r+0x15a>
 800110c:	9105      	str	r1, [sp, #20]
 800110e:	e7c4      	b.n	800109a <_vfiprintf_r+0x15a>
 8001110:	fb0c 2101 	mla	r1, ip, r1, r2
 8001114:	4604      	mov	r4, r0
 8001116:	2301      	movs	r3, #1
 8001118:	e7f0      	b.n	80010fc <_vfiprintf_r+0x1bc>
 800111a:	ab03      	add	r3, sp, #12
 800111c:	9300      	str	r3, [sp, #0]
 800111e:	462a      	mov	r2, r5
 8001120:	4b12      	ldr	r3, [pc, #72]	; (800116c <_vfiprintf_r+0x22c>)
 8001122:	a904      	add	r1, sp, #16
 8001124:	4630      	mov	r0, r6
 8001126:	f3af 8000 	nop.w
 800112a:	4607      	mov	r7, r0
 800112c:	1c78      	adds	r0, r7, #1
 800112e:	d1d6      	bne.n	80010de <_vfiprintf_r+0x19e>
 8001130:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8001132:	07d9      	lsls	r1, r3, #31
 8001134:	d405      	bmi.n	8001142 <_vfiprintf_r+0x202>
 8001136:	89ab      	ldrh	r3, [r5, #12]
 8001138:	059a      	lsls	r2, r3, #22
 800113a:	d402      	bmi.n	8001142 <_vfiprintf_r+0x202>
 800113c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800113e:	f7ff fddb 	bl	8000cf8 <__retarget_lock_release_recursive>
 8001142:	89ab      	ldrh	r3, [r5, #12]
 8001144:	065b      	lsls	r3, r3, #25
 8001146:	f53f af1d 	bmi.w	8000f84 <_vfiprintf_r+0x44>
 800114a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800114c:	e71c      	b.n	8000f88 <_vfiprintf_r+0x48>
 800114e:	ab03      	add	r3, sp, #12
 8001150:	9300      	str	r3, [sp, #0]
 8001152:	462a      	mov	r2, r5
 8001154:	4b05      	ldr	r3, [pc, #20]	; (800116c <_vfiprintf_r+0x22c>)
 8001156:	a904      	add	r1, sp, #16
 8001158:	4630      	mov	r0, r6
 800115a:	f000 f879 	bl	8001250 <_printf_i>
 800115e:	e7e4      	b.n	800112a <_vfiprintf_r+0x1ea>
 8001160:	080018ba 	.word	0x080018ba
 8001164:	080018c4 	.word	0x080018c4
 8001168:	00000000 	.word	0x00000000
 800116c:	08000f1b 	.word	0x08000f1b
 8001170:	080018c0 	.word	0x080018c0

08001174 <_printf_common>:
 8001174:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001178:	4616      	mov	r6, r2
 800117a:	4699      	mov	r9, r3
 800117c:	688a      	ldr	r2, [r1, #8]
 800117e:	690b      	ldr	r3, [r1, #16]
 8001180:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8001184:	4293      	cmp	r3, r2
 8001186:	bfb8      	it	lt
 8001188:	4613      	movlt	r3, r2
 800118a:	6033      	str	r3, [r6, #0]
 800118c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8001190:	4607      	mov	r7, r0
 8001192:	460c      	mov	r4, r1
 8001194:	b10a      	cbz	r2, 800119a <_printf_common+0x26>
 8001196:	3301      	adds	r3, #1
 8001198:	6033      	str	r3, [r6, #0]
 800119a:	6823      	ldr	r3, [r4, #0]
 800119c:	0699      	lsls	r1, r3, #26
 800119e:	bf42      	ittt	mi
 80011a0:	6833      	ldrmi	r3, [r6, #0]
 80011a2:	3302      	addmi	r3, #2
 80011a4:	6033      	strmi	r3, [r6, #0]
 80011a6:	6825      	ldr	r5, [r4, #0]
 80011a8:	f015 0506 	ands.w	r5, r5, #6
 80011ac:	d106      	bne.n	80011bc <_printf_common+0x48>
 80011ae:	f104 0a19 	add.w	sl, r4, #25
 80011b2:	68e3      	ldr	r3, [r4, #12]
 80011b4:	6832      	ldr	r2, [r6, #0]
 80011b6:	1a9b      	subs	r3, r3, r2
 80011b8:	42ab      	cmp	r3, r5
 80011ba:	dc26      	bgt.n	800120a <_printf_common+0x96>
 80011bc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80011c0:	1e13      	subs	r3, r2, #0
 80011c2:	6822      	ldr	r2, [r4, #0]
 80011c4:	bf18      	it	ne
 80011c6:	2301      	movne	r3, #1
 80011c8:	0692      	lsls	r2, r2, #26
 80011ca:	d42b      	bmi.n	8001224 <_printf_common+0xb0>
 80011cc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80011d0:	4649      	mov	r1, r9
 80011d2:	4638      	mov	r0, r7
 80011d4:	47c0      	blx	r8
 80011d6:	3001      	adds	r0, #1
 80011d8:	d01e      	beq.n	8001218 <_printf_common+0xa4>
 80011da:	6823      	ldr	r3, [r4, #0]
 80011dc:	6922      	ldr	r2, [r4, #16]
 80011de:	f003 0306 	and.w	r3, r3, #6
 80011e2:	2b04      	cmp	r3, #4
 80011e4:	bf02      	ittt	eq
 80011e6:	68e5      	ldreq	r5, [r4, #12]
 80011e8:	6833      	ldreq	r3, [r6, #0]
 80011ea:	1aed      	subeq	r5, r5, r3
 80011ec:	68a3      	ldr	r3, [r4, #8]
 80011ee:	bf0c      	ite	eq
 80011f0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80011f4:	2500      	movne	r5, #0
 80011f6:	4293      	cmp	r3, r2
 80011f8:	bfc4      	itt	gt
 80011fa:	1a9b      	subgt	r3, r3, r2
 80011fc:	18ed      	addgt	r5, r5, r3
 80011fe:	2600      	movs	r6, #0
 8001200:	341a      	adds	r4, #26
 8001202:	42b5      	cmp	r5, r6
 8001204:	d11a      	bne.n	800123c <_printf_common+0xc8>
 8001206:	2000      	movs	r0, #0
 8001208:	e008      	b.n	800121c <_printf_common+0xa8>
 800120a:	2301      	movs	r3, #1
 800120c:	4652      	mov	r2, sl
 800120e:	4649      	mov	r1, r9
 8001210:	4638      	mov	r0, r7
 8001212:	47c0      	blx	r8
 8001214:	3001      	adds	r0, #1
 8001216:	d103      	bne.n	8001220 <_printf_common+0xac>
 8001218:	f04f 30ff 	mov.w	r0, #4294967295
 800121c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001220:	3501      	adds	r5, #1
 8001222:	e7c6      	b.n	80011b2 <_printf_common+0x3e>
 8001224:	18e1      	adds	r1, r4, r3
 8001226:	1c5a      	adds	r2, r3, #1
 8001228:	2030      	movs	r0, #48	; 0x30
 800122a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800122e:	4422      	add	r2, r4
 8001230:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8001234:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8001238:	3302      	adds	r3, #2
 800123a:	e7c7      	b.n	80011cc <_printf_common+0x58>
 800123c:	2301      	movs	r3, #1
 800123e:	4622      	mov	r2, r4
 8001240:	4649      	mov	r1, r9
 8001242:	4638      	mov	r0, r7
 8001244:	47c0      	blx	r8
 8001246:	3001      	adds	r0, #1
 8001248:	d0e6      	beq.n	8001218 <_printf_common+0xa4>
 800124a:	3601      	adds	r6, #1
 800124c:	e7d9      	b.n	8001202 <_printf_common+0x8e>
	...

08001250 <_printf_i>:
 8001250:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8001254:	7e0f      	ldrb	r7, [r1, #24]
 8001256:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8001258:	2f78      	cmp	r7, #120	; 0x78
 800125a:	4691      	mov	r9, r2
 800125c:	4680      	mov	r8, r0
 800125e:	460c      	mov	r4, r1
 8001260:	469a      	mov	sl, r3
 8001262:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8001266:	d807      	bhi.n	8001278 <_printf_i+0x28>
 8001268:	2f62      	cmp	r7, #98	; 0x62
 800126a:	d80a      	bhi.n	8001282 <_printf_i+0x32>
 800126c:	2f00      	cmp	r7, #0
 800126e:	f000 80d4 	beq.w	800141a <_printf_i+0x1ca>
 8001272:	2f58      	cmp	r7, #88	; 0x58
 8001274:	f000 80c0 	beq.w	80013f8 <_printf_i+0x1a8>
 8001278:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800127c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8001280:	e03a      	b.n	80012f8 <_printf_i+0xa8>
 8001282:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8001286:	2b15      	cmp	r3, #21
 8001288:	d8f6      	bhi.n	8001278 <_printf_i+0x28>
 800128a:	a101      	add	r1, pc, #4	; (adr r1, 8001290 <_printf_i+0x40>)
 800128c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8001290:	080012e9 	.word	0x080012e9
 8001294:	080012fd 	.word	0x080012fd
 8001298:	08001279 	.word	0x08001279
 800129c:	08001279 	.word	0x08001279
 80012a0:	08001279 	.word	0x08001279
 80012a4:	08001279 	.word	0x08001279
 80012a8:	080012fd 	.word	0x080012fd
 80012ac:	08001279 	.word	0x08001279
 80012b0:	08001279 	.word	0x08001279
 80012b4:	08001279 	.word	0x08001279
 80012b8:	08001279 	.word	0x08001279
 80012bc:	08001401 	.word	0x08001401
 80012c0:	08001329 	.word	0x08001329
 80012c4:	080013bb 	.word	0x080013bb
 80012c8:	08001279 	.word	0x08001279
 80012cc:	08001279 	.word	0x08001279
 80012d0:	08001423 	.word	0x08001423
 80012d4:	08001279 	.word	0x08001279
 80012d8:	08001329 	.word	0x08001329
 80012dc:	08001279 	.word	0x08001279
 80012e0:	08001279 	.word	0x08001279
 80012e4:	080013c3 	.word	0x080013c3
 80012e8:	682b      	ldr	r3, [r5, #0]
 80012ea:	1d1a      	adds	r2, r3, #4
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	602a      	str	r2, [r5, #0]
 80012f0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80012f4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80012f8:	2301      	movs	r3, #1
 80012fa:	e09f      	b.n	800143c <_printf_i+0x1ec>
 80012fc:	6820      	ldr	r0, [r4, #0]
 80012fe:	682b      	ldr	r3, [r5, #0]
 8001300:	0607      	lsls	r7, r0, #24
 8001302:	f103 0104 	add.w	r1, r3, #4
 8001306:	6029      	str	r1, [r5, #0]
 8001308:	d501      	bpl.n	800130e <_printf_i+0xbe>
 800130a:	681e      	ldr	r6, [r3, #0]
 800130c:	e003      	b.n	8001316 <_printf_i+0xc6>
 800130e:	0646      	lsls	r6, r0, #25
 8001310:	d5fb      	bpl.n	800130a <_printf_i+0xba>
 8001312:	f9b3 6000 	ldrsh.w	r6, [r3]
 8001316:	2e00      	cmp	r6, #0
 8001318:	da03      	bge.n	8001322 <_printf_i+0xd2>
 800131a:	232d      	movs	r3, #45	; 0x2d
 800131c:	4276      	negs	r6, r6
 800131e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8001322:	485a      	ldr	r0, [pc, #360]	; (800148c <_printf_i+0x23c>)
 8001324:	230a      	movs	r3, #10
 8001326:	e012      	b.n	800134e <_printf_i+0xfe>
 8001328:	682b      	ldr	r3, [r5, #0]
 800132a:	6820      	ldr	r0, [r4, #0]
 800132c:	1d19      	adds	r1, r3, #4
 800132e:	6029      	str	r1, [r5, #0]
 8001330:	0605      	lsls	r5, r0, #24
 8001332:	d501      	bpl.n	8001338 <_printf_i+0xe8>
 8001334:	681e      	ldr	r6, [r3, #0]
 8001336:	e002      	b.n	800133e <_printf_i+0xee>
 8001338:	0641      	lsls	r1, r0, #25
 800133a:	d5fb      	bpl.n	8001334 <_printf_i+0xe4>
 800133c:	881e      	ldrh	r6, [r3, #0]
 800133e:	4853      	ldr	r0, [pc, #332]	; (800148c <_printf_i+0x23c>)
 8001340:	2f6f      	cmp	r7, #111	; 0x6f
 8001342:	bf0c      	ite	eq
 8001344:	2308      	moveq	r3, #8
 8001346:	230a      	movne	r3, #10
 8001348:	2100      	movs	r1, #0
 800134a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800134e:	6865      	ldr	r5, [r4, #4]
 8001350:	60a5      	str	r5, [r4, #8]
 8001352:	2d00      	cmp	r5, #0
 8001354:	bfa2      	ittt	ge
 8001356:	6821      	ldrge	r1, [r4, #0]
 8001358:	f021 0104 	bicge.w	r1, r1, #4
 800135c:	6021      	strge	r1, [r4, #0]
 800135e:	b90e      	cbnz	r6, 8001364 <_printf_i+0x114>
 8001360:	2d00      	cmp	r5, #0
 8001362:	d04b      	beq.n	80013fc <_printf_i+0x1ac>
 8001364:	4615      	mov	r5, r2
 8001366:	fbb6 f1f3 	udiv	r1, r6, r3
 800136a:	fb03 6711 	mls	r7, r3, r1, r6
 800136e:	5dc7      	ldrb	r7, [r0, r7]
 8001370:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8001374:	4637      	mov	r7, r6
 8001376:	42bb      	cmp	r3, r7
 8001378:	460e      	mov	r6, r1
 800137a:	d9f4      	bls.n	8001366 <_printf_i+0x116>
 800137c:	2b08      	cmp	r3, #8
 800137e:	d10b      	bne.n	8001398 <_printf_i+0x148>
 8001380:	6823      	ldr	r3, [r4, #0]
 8001382:	07de      	lsls	r6, r3, #31
 8001384:	d508      	bpl.n	8001398 <_printf_i+0x148>
 8001386:	6923      	ldr	r3, [r4, #16]
 8001388:	6861      	ldr	r1, [r4, #4]
 800138a:	4299      	cmp	r1, r3
 800138c:	bfde      	ittt	le
 800138e:	2330      	movle	r3, #48	; 0x30
 8001390:	f805 3c01 	strble.w	r3, [r5, #-1]
 8001394:	f105 35ff 	addle.w	r5, r5, #4294967295
 8001398:	1b52      	subs	r2, r2, r5
 800139a:	6122      	str	r2, [r4, #16]
 800139c:	f8cd a000 	str.w	sl, [sp]
 80013a0:	464b      	mov	r3, r9
 80013a2:	aa03      	add	r2, sp, #12
 80013a4:	4621      	mov	r1, r4
 80013a6:	4640      	mov	r0, r8
 80013a8:	f7ff fee4 	bl	8001174 <_printf_common>
 80013ac:	3001      	adds	r0, #1
 80013ae:	d14a      	bne.n	8001446 <_printf_i+0x1f6>
 80013b0:	f04f 30ff 	mov.w	r0, #4294967295
 80013b4:	b004      	add	sp, #16
 80013b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80013ba:	6823      	ldr	r3, [r4, #0]
 80013bc:	f043 0320 	orr.w	r3, r3, #32
 80013c0:	6023      	str	r3, [r4, #0]
 80013c2:	4833      	ldr	r0, [pc, #204]	; (8001490 <_printf_i+0x240>)
 80013c4:	2778      	movs	r7, #120	; 0x78
 80013c6:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80013ca:	6823      	ldr	r3, [r4, #0]
 80013cc:	6829      	ldr	r1, [r5, #0]
 80013ce:	061f      	lsls	r7, r3, #24
 80013d0:	f851 6b04 	ldr.w	r6, [r1], #4
 80013d4:	d402      	bmi.n	80013dc <_printf_i+0x18c>
 80013d6:	065f      	lsls	r7, r3, #25
 80013d8:	bf48      	it	mi
 80013da:	b2b6      	uxthmi	r6, r6
 80013dc:	07df      	lsls	r7, r3, #31
 80013de:	bf48      	it	mi
 80013e0:	f043 0320 	orrmi.w	r3, r3, #32
 80013e4:	6029      	str	r1, [r5, #0]
 80013e6:	bf48      	it	mi
 80013e8:	6023      	strmi	r3, [r4, #0]
 80013ea:	b91e      	cbnz	r6, 80013f4 <_printf_i+0x1a4>
 80013ec:	6823      	ldr	r3, [r4, #0]
 80013ee:	f023 0320 	bic.w	r3, r3, #32
 80013f2:	6023      	str	r3, [r4, #0]
 80013f4:	2310      	movs	r3, #16
 80013f6:	e7a7      	b.n	8001348 <_printf_i+0xf8>
 80013f8:	4824      	ldr	r0, [pc, #144]	; (800148c <_printf_i+0x23c>)
 80013fa:	e7e4      	b.n	80013c6 <_printf_i+0x176>
 80013fc:	4615      	mov	r5, r2
 80013fe:	e7bd      	b.n	800137c <_printf_i+0x12c>
 8001400:	682b      	ldr	r3, [r5, #0]
 8001402:	6826      	ldr	r6, [r4, #0]
 8001404:	6961      	ldr	r1, [r4, #20]
 8001406:	1d18      	adds	r0, r3, #4
 8001408:	6028      	str	r0, [r5, #0]
 800140a:	0635      	lsls	r5, r6, #24
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	d501      	bpl.n	8001414 <_printf_i+0x1c4>
 8001410:	6019      	str	r1, [r3, #0]
 8001412:	e002      	b.n	800141a <_printf_i+0x1ca>
 8001414:	0670      	lsls	r0, r6, #25
 8001416:	d5fb      	bpl.n	8001410 <_printf_i+0x1c0>
 8001418:	8019      	strh	r1, [r3, #0]
 800141a:	2300      	movs	r3, #0
 800141c:	6123      	str	r3, [r4, #16]
 800141e:	4615      	mov	r5, r2
 8001420:	e7bc      	b.n	800139c <_printf_i+0x14c>
 8001422:	682b      	ldr	r3, [r5, #0]
 8001424:	1d1a      	adds	r2, r3, #4
 8001426:	602a      	str	r2, [r5, #0]
 8001428:	681d      	ldr	r5, [r3, #0]
 800142a:	6862      	ldr	r2, [r4, #4]
 800142c:	2100      	movs	r1, #0
 800142e:	4628      	mov	r0, r5
 8001430:	f7fe fed6 	bl	80001e0 <memchr>
 8001434:	b108      	cbz	r0, 800143a <_printf_i+0x1ea>
 8001436:	1b40      	subs	r0, r0, r5
 8001438:	6060      	str	r0, [r4, #4]
 800143a:	6863      	ldr	r3, [r4, #4]
 800143c:	6123      	str	r3, [r4, #16]
 800143e:	2300      	movs	r3, #0
 8001440:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8001444:	e7aa      	b.n	800139c <_printf_i+0x14c>
 8001446:	6923      	ldr	r3, [r4, #16]
 8001448:	462a      	mov	r2, r5
 800144a:	4649      	mov	r1, r9
 800144c:	4640      	mov	r0, r8
 800144e:	47d0      	blx	sl
 8001450:	3001      	adds	r0, #1
 8001452:	d0ad      	beq.n	80013b0 <_printf_i+0x160>
 8001454:	6823      	ldr	r3, [r4, #0]
 8001456:	079b      	lsls	r3, r3, #30
 8001458:	d413      	bmi.n	8001482 <_printf_i+0x232>
 800145a:	68e0      	ldr	r0, [r4, #12]
 800145c:	9b03      	ldr	r3, [sp, #12]
 800145e:	4298      	cmp	r0, r3
 8001460:	bfb8      	it	lt
 8001462:	4618      	movlt	r0, r3
 8001464:	e7a6      	b.n	80013b4 <_printf_i+0x164>
 8001466:	2301      	movs	r3, #1
 8001468:	4632      	mov	r2, r6
 800146a:	4649      	mov	r1, r9
 800146c:	4640      	mov	r0, r8
 800146e:	47d0      	blx	sl
 8001470:	3001      	adds	r0, #1
 8001472:	d09d      	beq.n	80013b0 <_printf_i+0x160>
 8001474:	3501      	adds	r5, #1
 8001476:	68e3      	ldr	r3, [r4, #12]
 8001478:	9903      	ldr	r1, [sp, #12]
 800147a:	1a5b      	subs	r3, r3, r1
 800147c:	42ab      	cmp	r3, r5
 800147e:	dcf2      	bgt.n	8001466 <_printf_i+0x216>
 8001480:	e7eb      	b.n	800145a <_printf_i+0x20a>
 8001482:	2500      	movs	r5, #0
 8001484:	f104 0619 	add.w	r6, r4, #25
 8001488:	e7f5      	b.n	8001476 <_printf_i+0x226>
 800148a:	bf00      	nop
 800148c:	080018cb 	.word	0x080018cb
 8001490:	080018dc 	.word	0x080018dc

08001494 <__sflush_r>:
 8001494:	898a      	ldrh	r2, [r1, #12]
 8001496:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800149a:	4605      	mov	r5, r0
 800149c:	0710      	lsls	r0, r2, #28
 800149e:	460c      	mov	r4, r1
 80014a0:	d458      	bmi.n	8001554 <__sflush_r+0xc0>
 80014a2:	684b      	ldr	r3, [r1, #4]
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	dc05      	bgt.n	80014b4 <__sflush_r+0x20>
 80014a8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	dc02      	bgt.n	80014b4 <__sflush_r+0x20>
 80014ae:	2000      	movs	r0, #0
 80014b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80014b4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80014b6:	2e00      	cmp	r6, #0
 80014b8:	d0f9      	beq.n	80014ae <__sflush_r+0x1a>
 80014ba:	2300      	movs	r3, #0
 80014bc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80014c0:	682f      	ldr	r7, [r5, #0]
 80014c2:	6a21      	ldr	r1, [r4, #32]
 80014c4:	602b      	str	r3, [r5, #0]
 80014c6:	d032      	beq.n	800152e <__sflush_r+0x9a>
 80014c8:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80014ca:	89a3      	ldrh	r3, [r4, #12]
 80014cc:	075a      	lsls	r2, r3, #29
 80014ce:	d505      	bpl.n	80014dc <__sflush_r+0x48>
 80014d0:	6863      	ldr	r3, [r4, #4]
 80014d2:	1ac0      	subs	r0, r0, r3
 80014d4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80014d6:	b10b      	cbz	r3, 80014dc <__sflush_r+0x48>
 80014d8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80014da:	1ac0      	subs	r0, r0, r3
 80014dc:	2300      	movs	r3, #0
 80014de:	4602      	mov	r2, r0
 80014e0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80014e2:	6a21      	ldr	r1, [r4, #32]
 80014e4:	4628      	mov	r0, r5
 80014e6:	47b0      	blx	r6
 80014e8:	1c43      	adds	r3, r0, #1
 80014ea:	89a3      	ldrh	r3, [r4, #12]
 80014ec:	d106      	bne.n	80014fc <__sflush_r+0x68>
 80014ee:	6829      	ldr	r1, [r5, #0]
 80014f0:	291d      	cmp	r1, #29
 80014f2:	d82b      	bhi.n	800154c <__sflush_r+0xb8>
 80014f4:	4a29      	ldr	r2, [pc, #164]	; (800159c <__sflush_r+0x108>)
 80014f6:	410a      	asrs	r2, r1
 80014f8:	07d6      	lsls	r6, r2, #31
 80014fa:	d427      	bmi.n	800154c <__sflush_r+0xb8>
 80014fc:	2200      	movs	r2, #0
 80014fe:	6062      	str	r2, [r4, #4]
 8001500:	04d9      	lsls	r1, r3, #19
 8001502:	6922      	ldr	r2, [r4, #16]
 8001504:	6022      	str	r2, [r4, #0]
 8001506:	d504      	bpl.n	8001512 <__sflush_r+0x7e>
 8001508:	1c42      	adds	r2, r0, #1
 800150a:	d101      	bne.n	8001510 <__sflush_r+0x7c>
 800150c:	682b      	ldr	r3, [r5, #0]
 800150e:	b903      	cbnz	r3, 8001512 <__sflush_r+0x7e>
 8001510:	6560      	str	r0, [r4, #84]	; 0x54
 8001512:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8001514:	602f      	str	r7, [r5, #0]
 8001516:	2900      	cmp	r1, #0
 8001518:	d0c9      	beq.n	80014ae <__sflush_r+0x1a>
 800151a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800151e:	4299      	cmp	r1, r3
 8001520:	d002      	beq.n	8001528 <__sflush_r+0x94>
 8001522:	4628      	mov	r0, r5
 8001524:	f7ff fbea 	bl	8000cfc <_free_r>
 8001528:	2000      	movs	r0, #0
 800152a:	6360      	str	r0, [r4, #52]	; 0x34
 800152c:	e7c0      	b.n	80014b0 <__sflush_r+0x1c>
 800152e:	2301      	movs	r3, #1
 8001530:	4628      	mov	r0, r5
 8001532:	47b0      	blx	r6
 8001534:	1c41      	adds	r1, r0, #1
 8001536:	d1c8      	bne.n	80014ca <__sflush_r+0x36>
 8001538:	682b      	ldr	r3, [r5, #0]
 800153a:	2b00      	cmp	r3, #0
 800153c:	d0c5      	beq.n	80014ca <__sflush_r+0x36>
 800153e:	2b1d      	cmp	r3, #29
 8001540:	d001      	beq.n	8001546 <__sflush_r+0xb2>
 8001542:	2b16      	cmp	r3, #22
 8001544:	d101      	bne.n	800154a <__sflush_r+0xb6>
 8001546:	602f      	str	r7, [r5, #0]
 8001548:	e7b1      	b.n	80014ae <__sflush_r+0x1a>
 800154a:	89a3      	ldrh	r3, [r4, #12]
 800154c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001550:	81a3      	strh	r3, [r4, #12]
 8001552:	e7ad      	b.n	80014b0 <__sflush_r+0x1c>
 8001554:	690f      	ldr	r7, [r1, #16]
 8001556:	2f00      	cmp	r7, #0
 8001558:	d0a9      	beq.n	80014ae <__sflush_r+0x1a>
 800155a:	0793      	lsls	r3, r2, #30
 800155c:	680e      	ldr	r6, [r1, #0]
 800155e:	bf08      	it	eq
 8001560:	694b      	ldreq	r3, [r1, #20]
 8001562:	600f      	str	r7, [r1, #0]
 8001564:	bf18      	it	ne
 8001566:	2300      	movne	r3, #0
 8001568:	eba6 0807 	sub.w	r8, r6, r7
 800156c:	608b      	str	r3, [r1, #8]
 800156e:	f1b8 0f00 	cmp.w	r8, #0
 8001572:	dd9c      	ble.n	80014ae <__sflush_r+0x1a>
 8001574:	6a21      	ldr	r1, [r4, #32]
 8001576:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8001578:	4643      	mov	r3, r8
 800157a:	463a      	mov	r2, r7
 800157c:	4628      	mov	r0, r5
 800157e:	47b0      	blx	r6
 8001580:	2800      	cmp	r0, #0
 8001582:	dc06      	bgt.n	8001592 <__sflush_r+0xfe>
 8001584:	89a3      	ldrh	r3, [r4, #12]
 8001586:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800158a:	81a3      	strh	r3, [r4, #12]
 800158c:	f04f 30ff 	mov.w	r0, #4294967295
 8001590:	e78e      	b.n	80014b0 <__sflush_r+0x1c>
 8001592:	4407      	add	r7, r0
 8001594:	eba8 0800 	sub.w	r8, r8, r0
 8001598:	e7e9      	b.n	800156e <__sflush_r+0xda>
 800159a:	bf00      	nop
 800159c:	dfbffffe 	.word	0xdfbffffe

080015a0 <_fflush_r>:
 80015a0:	b538      	push	{r3, r4, r5, lr}
 80015a2:	690b      	ldr	r3, [r1, #16]
 80015a4:	4605      	mov	r5, r0
 80015a6:	460c      	mov	r4, r1
 80015a8:	b913      	cbnz	r3, 80015b0 <_fflush_r+0x10>
 80015aa:	2500      	movs	r5, #0
 80015ac:	4628      	mov	r0, r5
 80015ae:	bd38      	pop	{r3, r4, r5, pc}
 80015b0:	b118      	cbz	r0, 80015ba <_fflush_r+0x1a>
 80015b2:	6a03      	ldr	r3, [r0, #32]
 80015b4:	b90b      	cbnz	r3, 80015ba <_fflush_r+0x1a>
 80015b6:	f7ff fa99 	bl	8000aec <__sinit>
 80015ba:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80015be:	2b00      	cmp	r3, #0
 80015c0:	d0f3      	beq.n	80015aa <_fflush_r+0xa>
 80015c2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80015c4:	07d0      	lsls	r0, r2, #31
 80015c6:	d404      	bmi.n	80015d2 <_fflush_r+0x32>
 80015c8:	0599      	lsls	r1, r3, #22
 80015ca:	d402      	bmi.n	80015d2 <_fflush_r+0x32>
 80015cc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80015ce:	f7ff fb92 	bl	8000cf6 <__retarget_lock_acquire_recursive>
 80015d2:	4628      	mov	r0, r5
 80015d4:	4621      	mov	r1, r4
 80015d6:	f7ff ff5d 	bl	8001494 <__sflush_r>
 80015da:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80015dc:	07da      	lsls	r2, r3, #31
 80015de:	4605      	mov	r5, r0
 80015e0:	d4e4      	bmi.n	80015ac <_fflush_r+0xc>
 80015e2:	89a3      	ldrh	r3, [r4, #12]
 80015e4:	059b      	lsls	r3, r3, #22
 80015e6:	d4e1      	bmi.n	80015ac <_fflush_r+0xc>
 80015e8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80015ea:	f7ff fb85 	bl	8000cf8 <__retarget_lock_release_recursive>
 80015ee:	e7dd      	b.n	80015ac <_fflush_r+0xc>

080015f0 <__swbuf_r>:
 80015f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80015f2:	460e      	mov	r6, r1
 80015f4:	4614      	mov	r4, r2
 80015f6:	4605      	mov	r5, r0
 80015f8:	b118      	cbz	r0, 8001602 <__swbuf_r+0x12>
 80015fa:	6a03      	ldr	r3, [r0, #32]
 80015fc:	b90b      	cbnz	r3, 8001602 <__swbuf_r+0x12>
 80015fe:	f7ff fa75 	bl	8000aec <__sinit>
 8001602:	69a3      	ldr	r3, [r4, #24]
 8001604:	60a3      	str	r3, [r4, #8]
 8001606:	89a3      	ldrh	r3, [r4, #12]
 8001608:	071a      	lsls	r2, r3, #28
 800160a:	d525      	bpl.n	8001658 <__swbuf_r+0x68>
 800160c:	6923      	ldr	r3, [r4, #16]
 800160e:	b31b      	cbz	r3, 8001658 <__swbuf_r+0x68>
 8001610:	6823      	ldr	r3, [r4, #0]
 8001612:	6922      	ldr	r2, [r4, #16]
 8001614:	1a98      	subs	r0, r3, r2
 8001616:	6963      	ldr	r3, [r4, #20]
 8001618:	b2f6      	uxtb	r6, r6
 800161a:	4283      	cmp	r3, r0
 800161c:	4637      	mov	r7, r6
 800161e:	dc04      	bgt.n	800162a <__swbuf_r+0x3a>
 8001620:	4621      	mov	r1, r4
 8001622:	4628      	mov	r0, r5
 8001624:	f7ff ffbc 	bl	80015a0 <_fflush_r>
 8001628:	b9e0      	cbnz	r0, 8001664 <__swbuf_r+0x74>
 800162a:	68a3      	ldr	r3, [r4, #8]
 800162c:	3b01      	subs	r3, #1
 800162e:	60a3      	str	r3, [r4, #8]
 8001630:	6823      	ldr	r3, [r4, #0]
 8001632:	1c5a      	adds	r2, r3, #1
 8001634:	6022      	str	r2, [r4, #0]
 8001636:	701e      	strb	r6, [r3, #0]
 8001638:	6962      	ldr	r2, [r4, #20]
 800163a:	1c43      	adds	r3, r0, #1
 800163c:	429a      	cmp	r2, r3
 800163e:	d004      	beq.n	800164a <__swbuf_r+0x5a>
 8001640:	89a3      	ldrh	r3, [r4, #12]
 8001642:	07db      	lsls	r3, r3, #31
 8001644:	d506      	bpl.n	8001654 <__swbuf_r+0x64>
 8001646:	2e0a      	cmp	r6, #10
 8001648:	d104      	bne.n	8001654 <__swbuf_r+0x64>
 800164a:	4621      	mov	r1, r4
 800164c:	4628      	mov	r0, r5
 800164e:	f7ff ffa7 	bl	80015a0 <_fflush_r>
 8001652:	b938      	cbnz	r0, 8001664 <__swbuf_r+0x74>
 8001654:	4638      	mov	r0, r7
 8001656:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001658:	4621      	mov	r1, r4
 800165a:	4628      	mov	r0, r5
 800165c:	f000 f806 	bl	800166c <__swsetup_r>
 8001660:	2800      	cmp	r0, #0
 8001662:	d0d5      	beq.n	8001610 <__swbuf_r+0x20>
 8001664:	f04f 37ff 	mov.w	r7, #4294967295
 8001668:	e7f4      	b.n	8001654 <__swbuf_r+0x64>
	...

0800166c <__swsetup_r>:
 800166c:	b538      	push	{r3, r4, r5, lr}
 800166e:	4b2a      	ldr	r3, [pc, #168]	; (8001718 <__swsetup_r+0xac>)
 8001670:	4605      	mov	r5, r0
 8001672:	6818      	ldr	r0, [r3, #0]
 8001674:	460c      	mov	r4, r1
 8001676:	b118      	cbz	r0, 8001680 <__swsetup_r+0x14>
 8001678:	6a03      	ldr	r3, [r0, #32]
 800167a:	b90b      	cbnz	r3, 8001680 <__swsetup_r+0x14>
 800167c:	f7ff fa36 	bl	8000aec <__sinit>
 8001680:	89a3      	ldrh	r3, [r4, #12]
 8001682:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8001686:	0718      	lsls	r0, r3, #28
 8001688:	d422      	bmi.n	80016d0 <__swsetup_r+0x64>
 800168a:	06d9      	lsls	r1, r3, #27
 800168c:	d407      	bmi.n	800169e <__swsetup_r+0x32>
 800168e:	2309      	movs	r3, #9
 8001690:	602b      	str	r3, [r5, #0]
 8001692:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8001696:	81a3      	strh	r3, [r4, #12]
 8001698:	f04f 30ff 	mov.w	r0, #4294967295
 800169c:	e034      	b.n	8001708 <__swsetup_r+0x9c>
 800169e:	0758      	lsls	r0, r3, #29
 80016a0:	d512      	bpl.n	80016c8 <__swsetup_r+0x5c>
 80016a2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80016a4:	b141      	cbz	r1, 80016b8 <__swsetup_r+0x4c>
 80016a6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80016aa:	4299      	cmp	r1, r3
 80016ac:	d002      	beq.n	80016b4 <__swsetup_r+0x48>
 80016ae:	4628      	mov	r0, r5
 80016b0:	f7ff fb24 	bl	8000cfc <_free_r>
 80016b4:	2300      	movs	r3, #0
 80016b6:	6363      	str	r3, [r4, #52]	; 0x34
 80016b8:	89a3      	ldrh	r3, [r4, #12]
 80016ba:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80016be:	81a3      	strh	r3, [r4, #12]
 80016c0:	2300      	movs	r3, #0
 80016c2:	6063      	str	r3, [r4, #4]
 80016c4:	6923      	ldr	r3, [r4, #16]
 80016c6:	6023      	str	r3, [r4, #0]
 80016c8:	89a3      	ldrh	r3, [r4, #12]
 80016ca:	f043 0308 	orr.w	r3, r3, #8
 80016ce:	81a3      	strh	r3, [r4, #12]
 80016d0:	6923      	ldr	r3, [r4, #16]
 80016d2:	b94b      	cbnz	r3, 80016e8 <__swsetup_r+0x7c>
 80016d4:	89a3      	ldrh	r3, [r4, #12]
 80016d6:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80016da:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80016de:	d003      	beq.n	80016e8 <__swsetup_r+0x7c>
 80016e0:	4621      	mov	r1, r4
 80016e2:	4628      	mov	r0, r5
 80016e4:	f000 f850 	bl	8001788 <__smakebuf_r>
 80016e8:	89a0      	ldrh	r0, [r4, #12]
 80016ea:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80016ee:	f010 0301 	ands.w	r3, r0, #1
 80016f2:	d00a      	beq.n	800170a <__swsetup_r+0x9e>
 80016f4:	2300      	movs	r3, #0
 80016f6:	60a3      	str	r3, [r4, #8]
 80016f8:	6963      	ldr	r3, [r4, #20]
 80016fa:	425b      	negs	r3, r3
 80016fc:	61a3      	str	r3, [r4, #24]
 80016fe:	6923      	ldr	r3, [r4, #16]
 8001700:	b943      	cbnz	r3, 8001714 <__swsetup_r+0xa8>
 8001702:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8001706:	d1c4      	bne.n	8001692 <__swsetup_r+0x26>
 8001708:	bd38      	pop	{r3, r4, r5, pc}
 800170a:	0781      	lsls	r1, r0, #30
 800170c:	bf58      	it	pl
 800170e:	6963      	ldrpl	r3, [r4, #20]
 8001710:	60a3      	str	r3, [r4, #8]
 8001712:	e7f4      	b.n	80016fe <__swsetup_r+0x92>
 8001714:	2000      	movs	r0, #0
 8001716:	e7f7      	b.n	8001708 <__swsetup_r+0x9c>
 8001718:	20000058 	.word	0x20000058

0800171c <_sbrk_r>:
 800171c:	b538      	push	{r3, r4, r5, lr}
 800171e:	4d06      	ldr	r5, [pc, #24]	; (8001738 <_sbrk_r+0x1c>)
 8001720:	2300      	movs	r3, #0
 8001722:	4604      	mov	r4, r0
 8001724:	4608      	mov	r0, r1
 8001726:	602b      	str	r3, [r5, #0]
 8001728:	f7ff f862 	bl	80007f0 <_sbrk>
 800172c:	1c43      	adds	r3, r0, #1
 800172e:	d102      	bne.n	8001736 <_sbrk_r+0x1a>
 8001730:	682b      	ldr	r3, [r5, #0]
 8001732:	b103      	cbz	r3, 8001736 <_sbrk_r+0x1a>
 8001734:	6023      	str	r3, [r4, #0]
 8001736:	bd38      	pop	{r3, r4, r5, pc}
 8001738:	200014ac 	.word	0x200014ac

0800173c <__swhatbuf_r>:
 800173c:	b570      	push	{r4, r5, r6, lr}
 800173e:	460c      	mov	r4, r1
 8001740:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001744:	2900      	cmp	r1, #0
 8001746:	b096      	sub	sp, #88	; 0x58
 8001748:	4615      	mov	r5, r2
 800174a:	461e      	mov	r6, r3
 800174c:	da0d      	bge.n	800176a <__swhatbuf_r+0x2e>
 800174e:	89a3      	ldrh	r3, [r4, #12]
 8001750:	f013 0f80 	tst.w	r3, #128	; 0x80
 8001754:	f04f 0100 	mov.w	r1, #0
 8001758:	bf0c      	ite	eq
 800175a:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800175e:	2340      	movne	r3, #64	; 0x40
 8001760:	2000      	movs	r0, #0
 8001762:	6031      	str	r1, [r6, #0]
 8001764:	602b      	str	r3, [r5, #0]
 8001766:	b016      	add	sp, #88	; 0x58
 8001768:	bd70      	pop	{r4, r5, r6, pc}
 800176a:	466a      	mov	r2, sp
 800176c:	f000 f848 	bl	8001800 <_fstat_r>
 8001770:	2800      	cmp	r0, #0
 8001772:	dbec      	blt.n	800174e <__swhatbuf_r+0x12>
 8001774:	9901      	ldr	r1, [sp, #4]
 8001776:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800177a:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800177e:	4259      	negs	r1, r3
 8001780:	4159      	adcs	r1, r3
 8001782:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001786:	e7eb      	b.n	8001760 <__swhatbuf_r+0x24>

08001788 <__smakebuf_r>:
 8001788:	898b      	ldrh	r3, [r1, #12]
 800178a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800178c:	079d      	lsls	r5, r3, #30
 800178e:	4606      	mov	r6, r0
 8001790:	460c      	mov	r4, r1
 8001792:	d507      	bpl.n	80017a4 <__smakebuf_r+0x1c>
 8001794:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8001798:	6023      	str	r3, [r4, #0]
 800179a:	6123      	str	r3, [r4, #16]
 800179c:	2301      	movs	r3, #1
 800179e:	6163      	str	r3, [r4, #20]
 80017a0:	b002      	add	sp, #8
 80017a2:	bd70      	pop	{r4, r5, r6, pc}
 80017a4:	ab01      	add	r3, sp, #4
 80017a6:	466a      	mov	r2, sp
 80017a8:	f7ff ffc8 	bl	800173c <__swhatbuf_r>
 80017ac:	9900      	ldr	r1, [sp, #0]
 80017ae:	4605      	mov	r5, r0
 80017b0:	4630      	mov	r0, r6
 80017b2:	f7ff fb0f 	bl	8000dd4 <_malloc_r>
 80017b6:	b948      	cbnz	r0, 80017cc <__smakebuf_r+0x44>
 80017b8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80017bc:	059a      	lsls	r2, r3, #22
 80017be:	d4ef      	bmi.n	80017a0 <__smakebuf_r+0x18>
 80017c0:	f023 0303 	bic.w	r3, r3, #3
 80017c4:	f043 0302 	orr.w	r3, r3, #2
 80017c8:	81a3      	strh	r3, [r4, #12]
 80017ca:	e7e3      	b.n	8001794 <__smakebuf_r+0xc>
 80017cc:	89a3      	ldrh	r3, [r4, #12]
 80017ce:	6020      	str	r0, [r4, #0]
 80017d0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80017d4:	81a3      	strh	r3, [r4, #12]
 80017d6:	9b00      	ldr	r3, [sp, #0]
 80017d8:	6163      	str	r3, [r4, #20]
 80017da:	9b01      	ldr	r3, [sp, #4]
 80017dc:	6120      	str	r0, [r4, #16]
 80017de:	b15b      	cbz	r3, 80017f8 <__smakebuf_r+0x70>
 80017e0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80017e4:	4630      	mov	r0, r6
 80017e6:	f000 f81d 	bl	8001824 <_isatty_r>
 80017ea:	b128      	cbz	r0, 80017f8 <__smakebuf_r+0x70>
 80017ec:	89a3      	ldrh	r3, [r4, #12]
 80017ee:	f023 0303 	bic.w	r3, r3, #3
 80017f2:	f043 0301 	orr.w	r3, r3, #1
 80017f6:	81a3      	strh	r3, [r4, #12]
 80017f8:	89a3      	ldrh	r3, [r4, #12]
 80017fa:	431d      	orrs	r5, r3
 80017fc:	81a5      	strh	r5, [r4, #12]
 80017fe:	e7cf      	b.n	80017a0 <__smakebuf_r+0x18>

08001800 <_fstat_r>:
 8001800:	b538      	push	{r3, r4, r5, lr}
 8001802:	4d07      	ldr	r5, [pc, #28]	; (8001820 <_fstat_r+0x20>)
 8001804:	2300      	movs	r3, #0
 8001806:	4604      	mov	r4, r0
 8001808:	4608      	mov	r0, r1
 800180a:	4611      	mov	r1, r2
 800180c:	602b      	str	r3, [r5, #0]
 800180e:	f7fe ffc7 	bl	80007a0 <_fstat>
 8001812:	1c43      	adds	r3, r0, #1
 8001814:	d102      	bne.n	800181c <_fstat_r+0x1c>
 8001816:	682b      	ldr	r3, [r5, #0]
 8001818:	b103      	cbz	r3, 800181c <_fstat_r+0x1c>
 800181a:	6023      	str	r3, [r4, #0]
 800181c:	bd38      	pop	{r3, r4, r5, pc}
 800181e:	bf00      	nop
 8001820:	200014ac 	.word	0x200014ac

08001824 <_isatty_r>:
 8001824:	b538      	push	{r3, r4, r5, lr}
 8001826:	4d06      	ldr	r5, [pc, #24]	; (8001840 <_isatty_r+0x1c>)
 8001828:	2300      	movs	r3, #0
 800182a:	4604      	mov	r4, r0
 800182c:	4608      	mov	r0, r1
 800182e:	602b      	str	r3, [r5, #0]
 8001830:	f7fe ffc6 	bl	80007c0 <_isatty>
 8001834:	1c43      	adds	r3, r0, #1
 8001836:	d102      	bne.n	800183e <_isatty_r+0x1a>
 8001838:	682b      	ldr	r3, [r5, #0]
 800183a:	b103      	cbz	r3, 800183e <_isatty_r+0x1a>
 800183c:	6023      	str	r3, [r4, #0]
 800183e:	bd38      	pop	{r3, r4, r5, pc}
 8001840:	200014ac 	.word	0x200014ac

08001844 <_init>:
 8001844:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001846:	bf00      	nop
 8001848:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800184a:	bc08      	pop	{r3}
 800184c:	469e      	mov	lr, r3
 800184e:	4770      	bx	lr

08001850 <_fini>:
 8001850:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001852:	bf00      	nop
 8001854:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001856:	bc08      	pop	{r3}
 8001858:	469e      	mov	lr, r3
 800185a:	4770      	bx	lr
